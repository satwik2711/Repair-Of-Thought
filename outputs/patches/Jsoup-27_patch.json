{
  "Jsoup-27": {
    "prompt": [
      "You are a Senior Level Programmer with expertise in debugging and code repair. Your task is to review the provided function and produce a corrected, function-level implementation that fully addresses the identified bug.\n\n@@ Context\n// Provide a fix for the buggy function.\nRoot cause: The root cause of the bug is the case sensitivity issue in the function getCharsetFromContentType. The function correctly extracts the charset from the content type header, trims it, and converts it to uppercase. However, the test case expects the charset to be in lowercase ('utf-8'), while the function returns it in uppercase ('UTF-8'). This mismatch causes the assertion error.\nSuggestion: Convert to Lowercase\nInstead of converting the charset to uppercase, we can convert it to lowercase to match the expected case in the test case. This can be done by replacing the line 'charset = charset.toUpperCase(Locale.ENGLISH);' with 'charset = charset.toLowerCase(Locale.ENGLISH);'. This approach ensures that the function returns the charset in the correct case, resolving the assertion error.\n// Buggy Function\nstatic String getCharsetFromContentType(String contentType) {\n    if (contentType == null) return null;\n    Matcher m = charsetPattern.matcher(contentType);\n    if (m.find()) {\n        String charset = m.group(1).trim();\n        charset = charset.toUpperCase(Locale.ENGLISH);\n        return charset;\n    }\n    return null;\n}\n// Fixed Function\n\n@@ Instructions\n1. Carefully analyze the provided root cause and fix suggestion.\n2. Ensure your implementation completely resolves the identified issue.\n3. Maintain the original method signature.\n4. Preserve the original functionality and coding style as much as possible.\n5. Incorporate all working parts of the original implementation.\n6. Follow the provided fix suggestion without over-engineering or introducing unnecessary changes.\n\n@@ Response Format\nReturn ONLY the complete fixed function wrapped in ```java\n<your implementation>\n``` tags.\n\n@@ Important Notes\n- Do not add unnecessary optimizations.\n- Do not modify the method signature.\n- Maintain the original variable names and overall coding style wherever possible.",
      "You are a Senior Level Programmer with expertise in debugging and code repair. Your task is to review the provided function and produce a corrected, function-level implementation that fully addresses the identified bug.\n\n@@ Context\n// Provide a fix for the buggy function.\nRoot cause: The root cause of the bug is the case sensitivity issue in the function getCharsetFromContentType. The function correctly extracts the charset from the content type header, trims it, and converts it to uppercase. However, the test case expects the charset to be in lowercase ('utf-8'), while the function returns it in uppercase ('UTF-8'). This mismatch causes the assertion error.\nSuggestion: Use Case-Insensitive Comparison\nAnother approach is to use a case-insensitive comparison in the test case. We can modify the test case to use the 'assertEquals' method with a case-insensitive comparison, like this: 'assertEquals(\"utf-8\", DataUtil.getCharsetFromContentType(\"text/html;charset=utf-8 \").toLowerCase());'. This approach allows the test case to pass regardless of the case of the charset returned by the function.\n// Buggy Function\nstatic String getCharsetFromContentType(String contentType) {\n    if (contentType == null) return null;\n    Matcher m = charsetPattern.matcher(contentType);\n    if (m.find()) {\n        String charset = m.group(1).trim();\n        charset = charset.toUpperCase(Locale.ENGLISH);\n        return charset;\n    }\n    return null;\n}\n// Fixed Function\n\n@@ Instructions\n1. Carefully analyze the provided root cause and fix suggestion.\n2. Ensure your implementation completely resolves the identified issue.\n3. Maintain the original method signature.\n4. Preserve the original functionality and coding style as much as possible.\n5. Incorporate all working parts of the original implementation.\n6. Follow the provided fix suggestion without over-engineering or introducing unnecessary changes.\n\n@@ Response Format\nReturn ONLY the complete fixed function wrapped in ```java\n<your implementation>\n``` tags.\n\n@@ Important Notes\n- Do not add unnecessary optimizations.\n- Do not modify the method signature.\n- Maintain the original variable names and overall coding style wherever possible.",
      "You are a Senior Level Programmer with expertise in debugging and code repair. Your task is to review the provided function and produce a corrected, function-level implementation that fully addresses the identified bug.\n\n@@ Context\n// Provide a fix for the buggy function.\nRoot cause: The root cause of the bug is the case sensitivity issue in the function getCharsetFromContentType. The function correctly extracts the charset from the content type header, trims it, and converts it to uppercase. However, the test case expects the charset to be in lowercase ('utf-8'), while the function returns it in uppercase ('UTF-8'). This mismatch causes the assertion error.\nSuggestion: Return Original Case\nWe can also modify the function to return the charset in its original case, without converting it to uppercase or lowercase. This can be done by removing the line 'charset = charset.toUpperCase(Locale.ENGLISH);' altogether. This approach ensures that the function returns the charset as it is extracted from the content type header, without any case conversion.\n// Buggy Function\nstatic String getCharsetFromContentType(String contentType) {\n    if (contentType == null) return null;\n    Matcher m = charsetPattern.matcher(contentType);\n    if (m.find()) {\n        String charset = m.group(1).trim();\n        charset = charset.toUpperCase(Locale.ENGLISH);\n        return charset;\n    }\n    return null;\n}\n// Fixed Function\n\n@@ Instructions\n1. Carefully analyze the provided root cause and fix suggestion.\n2. Ensure your implementation completely resolves the identified issue.\n3. Maintain the original method signature.\n4. Preserve the original functionality and coding style as much as possible.\n5. Incorporate all working parts of the original implementation.\n6. Follow the provided fix suggestion without over-engineering or introducing unnecessary changes.\n\n@@ Response Format\nReturn ONLY the complete fixed function wrapped in ```java\n<your implementation>\n``` tags.\n\n@@ Important Notes\n- Do not add unnecessary optimizations.\n- Do not modify the method signature.\n- Maintain the original variable names and overall coding style wherever possible."
    ],
    "patches": [
      "static String getCharsetFromContentType(String contentType) {\n    if (contentType == null) return null;\n    Matcher m = charsetPattern.matcher(contentType);\n    if (m.find()) {\n        String charset = m.group(1).trim();\n        charset = charset.toLowerCase(Locale.ENGLISH);\n        return charset;\n    }\n    return null;\n}",
      "static String getCharsetFromContentType(String contentType) {\n    if (contentType == null) return null;\n    Matcher m = charsetPattern.matcher(contentType);\n    if (m.find()) {\n        String charset = m.group(1).trim();\n        charset = charset.toLowerCase(Locale.ENGLISH);\n        return charset;\n    }\n    return null;\n}",
      "static String getCharsetFromContentType(String contentType) {\n    if (contentType == null) return null;\n    Matcher m = charsetPattern.matcher(contentType);\n    if (m.find()) {\n        String charset = m.group(1).trim();\n        return charset;\n    }\n    return null;\n}"
    ]
  }
}
{
  "Compress-44": {
    "prompt": [
      "You are a Senior Level Programmer with expertise in debugging and code repair. Your task is to review the provided function and produce a corrected, function-level implementation that fully addresses the identified bug.\n\n@@ Context\n// Provide a fix for the buggy function.\nRoot cause: The ChecksumCalculatingInputStream class does not perform a null check on the checksum object in its constructor. As a result, when a null checksum object is passed, it does not throw a NullPointerException as expected.\nSuggestion: Add a Simple Null Check\nAdd a simple null check at the beginning of the constructor to throw a NullPointerException if the checksum object is null. This can be done by adding a conditional statement to check if the checksum object is null, and if so, throw a NullPointerException.\n\n```java\npublic ChecksumCalculatingInputStream(final Checksum checksum, final InputStream in) {\n    if (checksum == null) {\n        throw new NullPointerException(\"Checksum object cannot be null\");\n    }\n    this.checksum = checksum;\n    this.in = in;\n}\n```\n// Buggy Function\npublic ChecksumCalculatingInputStream(final Checksum checksum, final InputStream in) {\n\n\n\n    this.checksum = checksum;\n    this.in = in;\n}\n// Fixed Function\n\n@@ Instructions\n1. Carefully analyze the provided root cause and fix suggestion.\n2. Ensure your implementation completely resolves the identified issue.\n3. Maintain the original method signature.\n4. Preserve the original functionality and coding style as much as possible.\n5. Incorporate all working parts of the original implementation.\n6. Follow the provided fix suggestion without over-engineering or introducing unnecessary changes.\n\n@@ Response Format\nReturn ONLY the complete fixed function wrapped in ```java\n<your implementation>\n``` tags.\n\n@@ Important Notes\n- Do not add unnecessary optimizations.\n- Do not modify the method signature.\n- Maintain the original variable names and overall coding style wherever possible.",
      "You are a Senior Level Programmer with expertise in debugging and code repair. Your task is to review the provided function and produce a corrected, function-level implementation that fully addresses the identified bug.\n\n@@ Context\n// Provide a fix for the buggy function.\nRoot cause: The ChecksumCalculatingInputStream class does not perform a null check on the checksum object in its constructor. As a result, when a null checksum object is passed, it does not throw a NullPointerException as expected.\nSuggestion: Use the Objects.requireNonNull Method\nUse the Objects.requireNonNull method to check for null and throw a NullPointerException with a custom message. This method is a more concise way to perform a null check and provides a clear error message.\n\n```java\npublic ChecksumCalculatingInputStream(final Checksum checksum, final InputStream in) {\n    this.checksum = Objects.requireNonNull(checksum, \"Checksum object cannot be null\");\n    this.in = in;\n}\n```\n// Buggy Function\npublic ChecksumCalculatingInputStream(final Checksum checksum, final InputStream in) {\n\n\n\n    this.checksum = checksum;\n    this.in = in;\n}\n// Fixed Function\n\n@@ Instructions\n1. Carefully analyze the provided root cause and fix suggestion.\n2. Ensure your implementation completely resolves the identified issue.\n3. Maintain the original method signature.\n4. Preserve the original functionality and coding style as much as possible.\n5. Incorporate all working parts of the original implementation.\n6. Follow the provided fix suggestion without over-engineering or introducing unnecessary changes.\n\n@@ Response Format\nReturn ONLY the complete fixed function wrapped in ```java\n<your implementation>\n``` tags.\n\n@@ Important Notes\n- Do not add unnecessary optimizations.\n- Do not modify the method signature.\n- Maintain the original variable names and overall coding style wherever possible.",
      "You are a Senior Level Programmer with expertise in debugging and code repair. Your task is to review the provided function and produce a corrected, function-level implementation that fully addresses the identified bug.\n\n@@ Context\n// Provide a fix for the buggy function.\nRoot cause: The ChecksumCalculatingInputStream class does not perform a null check on the checksum object in its constructor. As a result, when a null checksum object is passed, it does not throw a NullPointerException as expected.\nSuggestion: Use a Custom Exception\nInstead of throwing a NullPointerException, consider throwing a custom exception that provides more context about the error. This can be done by creating a custom exception class and throwing it when the checksum object is null.\n\n```java\npublic class ChecksumException extends Exception {\n    public ChecksumException(String message) {\n        super(message);\n    }\n}\n\npublic ChecksumCalculatingInputStream(final Checksum checksum, final InputStream in) {\n    if (checksum == null) {\n        throw new ChecksumException(\"Checksum object cannot be null\");\n    }\n    this.checksum = checksum;\n    this.in = in;\n}\n```\n// Buggy Function\npublic ChecksumCalculatingInputStream(final Checksum checksum, final InputStream in) {\n\n\n\n    this.checksum = checksum;\n    this.in = in;\n}\n// Fixed Function\n\n@@ Instructions\n1. Carefully analyze the provided root cause and fix suggestion.\n2. Ensure your implementation completely resolves the identified issue.\n3. Maintain the original method signature.\n4. Preserve the original functionality and coding style as much as possible.\n5. Incorporate all working parts of the original implementation.\n6. Follow the provided fix suggestion without over-engineering or introducing unnecessary changes.\n\n@@ Response Format\nReturn ONLY the complete fixed function wrapped in ```java\n<your implementation>\n``` tags.\n\n@@ Important Notes\n- Do not add unnecessary optimizations.\n- Do not modify the method signature.\n- Maintain the original variable names and overall coding style wherever possible."
    ],
    "patches": [
      "public ChecksumCalculatingInputStream(final Checksum checksum, final InputStream in) {\n    if (checksum == null) {\n        throw new NullPointerException(\"Checksum object cannot be null\");\n    }\n    this.checksum = checksum;\n    this.in = in;\n}",
      "public ChecksumCalculatingInputStream(final Checksum checksum, final InputStream in) {\n    this.checksum = Objects.requireNonNull(checksum, \"Checksum object cannot be null\");\n    this.in = in;\n}",
      "public ChecksumCalculatingInputStream(final Checksum checksum, final InputStream in) {\n    if (checksum == null) {\n        throw new ChecksumException(\"Checksum object cannot be null\");\n    }\n    this.checksum = checksum;\n    this.in = in;\n}"
    ]
  }
}
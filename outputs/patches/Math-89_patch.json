{
  "Math-89": {
    "prompt": [
      "You are a Senior Level Programmer with expertise in debugging and code repair. Your task is to review the provided function and produce a corrected, function-level implementation that fully addresses the identified bug.\n\n@@ Context\n// Provide a fix for the buggy function.\nRoot cause: The root cause of the bug is the explicit casting of the object `v` to a `Comparable` without checking if it actually implements the `Comparable` interface. This causes a `ClassCastException` when a non-comparable object is passed to the `addValue` function.\nSuggestion: Check if Object is Comparable Before Casting\nWe can add a check before casting the object to a `Comparable`. We can use the `instanceof` operator to check if the object implements the `Comparable` interface. If it does, we can proceed with the casting. If not, we can throw an `IllegalArgumentException` with a meaningful error message.\n\n```java\npublic void addValue(Object v) {\n    if (v instanceof Comparable) {\n        addValue((Comparable<?>) v);\n    } else {\n        throw new IllegalArgumentException(\"Object is not comparable\");\n    }\n}\n```\n// Buggy Function\npublic void addValue(Object v) {\n        addValue((Comparable<?>) v);            \n}\n// Fixed Function\n\n@@ Instructions\n1. Carefully analyze the provided root cause and fix suggestion.\n2. Ensure your implementation completely resolves the identified issue.\n3. Maintain the original method signature.\n4. Preserve the original functionality and coding style as much as possible.\n5. Incorporate all working parts of the original implementation.\n6. Follow the provided fix suggestion without over-engineering or introducing unnecessary changes.\n\n@@ Response Format\nReturn ONLY the complete fixed function wrapped in ```java\n<your implementation>\n``` tags.\n\n@@ Important Notes\n- Do not add unnecessary optimizations.\n- Do not modify the method signature.\n- Maintain the original variable names and overall coding style wherever possible.",
      "You are a Senior Level Programmer with expertise in debugging and code repair. Your task is to review the provided function and produce a corrected, function-level implementation that fully addresses the identified bug.\n\n@@ Context\n// Provide a fix for the buggy function.\nRoot cause: The root cause of the bug is the explicit casting of the object `v` to a `Comparable` without checking if it actually implements the `Comparable` interface. This causes a `ClassCastException` when a non-comparable object is passed to the `addValue` function.\nSuggestion: Use a More Robust Casting Mechanism\nInstead of using explicit casting, we can use a more robust casting mechanism such as the `Comparable.class.isInstance(v)` method. This method checks if the object `v` is an instance of the `Comparable` class and returns a boolean value indicating whether the cast is safe.\n\n```java\npublic void addValue(Object v) {\n    if (Comparable.class.isInstance(v)) {\n        addValue((Comparable<?>) v);\n    } else {\n        throw new IllegalArgumentException(\"Object is not comparable\");\n    }\n}\n```\n// Buggy Function\npublic void addValue(Object v) {\n        addValue((Comparable<?>) v);            \n}\n// Fixed Function\n\n@@ Instructions\n1. Carefully analyze the provided root cause and fix suggestion.\n2. Ensure your implementation completely resolves the identified issue.\n3. Maintain the original method signature.\n4. Preserve the original functionality and coding style as much as possible.\n5. Incorporate all working parts of the original implementation.\n6. Follow the provided fix suggestion without over-engineering or introducing unnecessary changes.\n\n@@ Response Format\nReturn ONLY the complete fixed function wrapped in ```java\n<your implementation>\n``` tags.\n\n@@ Important Notes\n- Do not add unnecessary optimizations.\n- Do not modify the method signature.\n- Maintain the original variable names and overall coding style wherever possible.",
      "You are a Senior Level Programmer with expertise in debugging and code repair. Your task is to review the provided function and produce a corrected, function-level implementation that fully addresses the identified bug.\n\n@@ Context\n// Provide a fix for the buggy function.\nRoot cause: The root cause of the bug is the explicit casting of the object `v` to a `Comparable` without checking if it actually implements the `Comparable` interface. This causes a `ClassCastException` when a non-comparable object is passed to the `addValue` function.\nSuggestion: Use a Try-Catch Block to Handle ClassCastException\nWe can use a try-catch block to catch the `ClassCastException` and throw an `IllegalArgumentException` with a meaningful error message. This approach is less efficient than the previous suggestions but can still be effective in handling the bug.\n\n```java\npublic void addValue(Object v) {\n    try {\n        addValue((Comparable<?>) v);\n    } catch (ClassCastException e) {\n        throw new IllegalArgumentException(\"Object is not comparable\", e);\n    }\n}\n```\n// Buggy Function\npublic void addValue(Object v) {\n        addValue((Comparable<?>) v);            \n}\n// Fixed Function\n\n@@ Instructions\n1. Carefully analyze the provided root cause and fix suggestion.\n2. Ensure your implementation completely resolves the identified issue.\n3. Maintain the original method signature.\n4. Preserve the original functionality and coding style as much as possible.\n5. Incorporate all working parts of the original implementation.\n6. Follow the provided fix suggestion without over-engineering or introducing unnecessary changes.\n\n@@ Response Format\nReturn ONLY the complete fixed function wrapped in ```java\n<your implementation>\n``` tags.\n\n@@ Important Notes\n- Do not add unnecessary optimizations.\n- Do not modify the method signature.\n- Maintain the original variable names and overall coding style wherever possible."
    ],
    "patches": [
      "public void addValue(Object v) {\n    if (v instanceof Comparable) {\n        addValue((Comparable<?>) v);\n    } else {\n        throw new IllegalArgumentException(\"Object is not comparable\");\n    }\n}",
      "public void addValue(Object v) {\n    if (Comparable.class.isInstance(v)) {\n        addValue((Comparable<?>) v);\n    } else {\n        throw new IllegalArgumentException(\"Object is not comparable\");\n    }\n}",
      "public void addValue(Object v) {\n    try {\n        addValue((Comparable<?>) v);\n    } catch (ClassCastException e) {\n        throw new IllegalArgumentException(\"Object is not comparable\", e);\n    }\n}"
    ]
  }
}
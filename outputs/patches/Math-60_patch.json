{
  "Math-60": {
    "prompt": [
      "You are a Senior Level Programmer with expertise in debugging and code repair. Your task is to review the provided function and produce a corrected, function-level implementation that fully addresses the identified bug.\n\n@@ Context\n// Provide a fix for the buggy function.\nRoot cause: The root cause of the bug is that the `erf` function is not able to handle inputs that are `Double.POSITIVE_INFINITY` or `Double.NEGATIVE_INFINITY`. This is because the `erf` function uses a continued fraction to compute the error function, and this continued fraction diverges to NaN for these extreme values.\nSuggestion: Special Case Handling\nWe can add special case handling to the `cumulativeProbability` method to return 1 or 0 immediately when the input is `Double.POSITIVE_INFINITY` or `Double.NEGATIVE_INFINITY`, respectively. This would avoid the need to call the `erf` function in these cases. Here is the modified code:\n```java\npublic double cumulativeProbability(double x) throws MathException {\n    if (x == Double.POSITIVE_INFINITY) {\n        return 1;\n    } else if (x == Double.NEGATIVE_INFINITY) {\n        return 0;\n    } else {\n        final double dev = x - mean;\n        try {\n            return 0.5 * (1.0 + Erf.erf((dev) /\n                    (standardDeviation * FastMath.sqrt(2.0))));\n        } catch (MaxIterationsExceededException ex) {\n            if (x < (mean - 20 * standardDeviation)) {\n                return 0;\n            } else if (x > (mean + 20 * standardDeviation)) {\n                return 1;\n            } else {\n                throw ex;\n            }\n        }\n    }\n}\n```\n// Buggy Function\npublic double cumulativeProbability(double x) throws MathException {\n    final double dev = x - mean;\n    try {\n    return 0.5 * (1.0 + Erf.erf((dev) /\n                (standardDeviation * FastMath.sqrt(2.0))));\n    } catch (MaxIterationsExceededException ex) {\n        if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38\n            return 0;\n        } else if (x > (mean + 20 * standardDeviation)) {\n            return 1;\n        } else {\n            throw ex;\n        }\n    }\n}\n// Fixed Function\n\n@@ Instructions\n1. Carefully analyze the provided root cause and fix suggestion.\n2. Ensure your implementation completely resolves the identified issue.\n3. Maintain the original method signature.\n4. Preserve the original functionality and coding style as much as possible.\n5. Incorporate all working parts of the original implementation.\n6. Follow the provided fix suggestion without over-engineering or introducing unnecessary changes.\n\n@@ Response Format\nReturn ONLY the complete fixed function wrapped in ```java\n<your implementation>\n``` tags.\n\n@@ Important Notes\n- Do not add unnecessary optimizations.\n- Do not modify the method signature.\n- Maintain the original variable names and overall coding style wherever possible.",
      "You are a Senior Level Programmer with expertise in debugging and code repair. Your task is to review the provided function and produce a corrected, function-level implementation that fully addresses the identified bug.\n\n@@ Context\n// Provide a fix for the buggy function.\nRoot cause: The root cause of the bug is that the `erf` function is not able to handle inputs that are `Double.POSITIVE_INFINITY` or `Double.NEGATIVE_INFINITY`. This is because the `erf` function uses a continued fraction to compute the error function, and this continued fraction diverges to NaN for these extreme values.\nSuggestion: Use a Different Implementation of the Error Function\nWe can use a different implementation of the error function that is able to handle extreme values correctly. For example, we could use an implementation that uses a series expansion to compute the error function, rather than a continued fraction. This would require replacing the `Erf.erf` call with a call to the new implementation.\n// Buggy Function\npublic double cumulativeProbability(double x) throws MathException {\n    final double dev = x - mean;\n    try {\n    return 0.5 * (1.0 + Erf.erf((dev) /\n                (standardDeviation * FastMath.sqrt(2.0))));\n    } catch (MaxIterationsExceededException ex) {\n        if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38\n            return 0;\n        } else if (x > (mean + 20 * standardDeviation)) {\n            return 1;\n        } else {\n            throw ex;\n        }\n    }\n}\n// Fixed Function\n\n@@ Instructions\n1. Carefully analyze the provided root cause and fix suggestion.\n2. Ensure your implementation completely resolves the identified issue.\n3. Maintain the original method signature.\n4. Preserve the original functionality and coding style as much as possible.\n5. Incorporate all working parts of the original implementation.\n6. Follow the provided fix suggestion without over-engineering or introducing unnecessary changes.\n\n@@ Response Format\nReturn ONLY the complete fixed function wrapped in ```java\n<your implementation>\n``` tags.\n\n@@ Important Notes\n- Do not add unnecessary optimizations.\n- Do not modify the method signature.\n- Maintain the original variable names and overall coding style wherever possible.",
      "You are a Senior Level Programmer with expertise in debugging and code repair. Your task is to review the provided function and produce a corrected, function-level implementation that fully addresses the identified bug.\n\n@@ Context\n// Provide a fix for the buggy function.\nRoot cause: The root cause of the bug is that the `erf` function is not able to handle inputs that are `Double.POSITIVE_INFINITY` or `Double.NEGATIVE_INFINITY`. This is because the `erf` function uses a continued fraction to compute the error function, and this continued fraction diverges to NaN for these extreme values.\nSuggestion: Limit the Input Range\nWe can modify the `cumulativeProbability` method to limit the input range to a finite range, such as [-40, 40] standard deviations from the mean. This would avoid the need to handle extreme values, but would also limit the accuracy of the method for very large or very small inputs. Here is the modified code:\n```java\npublic double cumulativeProbability(double x) throws MathException {\n    if (x < (mean - 40 * standardDeviation)) {\n        return 0;\n    } else if (x > (mean + 40 * standardDeviation)) {\n        return 1;\n    } else {\n        final double dev = x - mean;\n        try {\n            return 0.5 * (1.0 + Erf.erf((dev) /\n                    (standardDeviation * FastMath.sqrt(2.0))));\n        } catch (MaxIterationsExceededException ex) {\n            if (x < (mean - 20 * standardDeviation)) {\n                return 0;\n            } else if (x > (mean + 20 * standardDeviation)) {\n                return 1;\n            } else {\n                throw ex;\n            }\n        }\n    }\n}\n```\n// Buggy Function\npublic double cumulativeProbability(double x) throws MathException {\n    final double dev = x - mean;\n    try {\n    return 0.5 * (1.0 + Erf.erf((dev) /\n                (standardDeviation * FastMath.sqrt(2.0))));\n    } catch (MaxIterationsExceededException ex) {\n        if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38\n            return 0;\n        } else if (x > (mean + 20 * standardDeviation)) {\n            return 1;\n        } else {\n            throw ex;\n        }\n    }\n}\n// Fixed Function\n\n@@ Instructions\n1. Carefully analyze the provided root cause and fix suggestion.\n2. Ensure your implementation completely resolves the identified issue.\n3. Maintain the original method signature.\n4. Preserve the original functionality and coding style as much as possible.\n5. Incorporate all working parts of the original implementation.\n6. Follow the provided fix suggestion without over-engineering or introducing unnecessary changes.\n\n@@ Response Format\nReturn ONLY the complete fixed function wrapped in ```java\n<your implementation>\n``` tags.\n\n@@ Important Notes\n- Do not add unnecessary optimizations.\n- Do not modify the method signature.\n- Maintain the original variable names and overall coding style wherever possible."
    ],
    "patches": [
      "public double cumulativeProbability(double x) throws MathException {\n    if (x == Double.POSITIVE_INFINITY) {\n        return 1;\n    } else if (x == Double.NEGATIVE_INFINITY) {\n        return 0;\n    } else {\n        final double dev = x - mean;\n        try {\n            return 0.5 * (1.0 + Erf.erf((dev) /\n                    (standardDeviation * FastMath.sqrt(2.0))));\n        } catch (MaxIterationsExceededException ex) {\n            if (x < (mean - 20 * standardDeviation)) {\n                return 0;\n            } else if (x > (mean + 20 * standardDeviation)) {\n                return 1;\n            } else {\n                throw ex;\n            }\n        }\n    }\n}",
      "public double cumulativeProbability(double x) throws MathException {\n    final double dev = x - mean;\n    double z = dev / (standardDeviation * FastMath.sqrt(2.0));\n    if (Double.isInfinite(z)) {\n        if (z > 0) {\n            return 1.0;\n        } else {\n            return 0.0;\n        }\n    }\n    try {\n        return 0.5 * (1.0 + Erf.erf(z));\n    } catch (MaxIterationsExceededException ex) {\n        if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38\n            return 0;\n        } else if (x > (mean + 20 * standardDeviation)) {\n            return 1;\n        } else {\n            throw ex;\n        }\n    }\n}",
      "public double cumulativeProbability(double x) throws MathException {\n    if (x < (mean - 40 * standardDeviation)) {\n        return 0;\n    } else if (x > (mean + 40 * standardDeviation)) {\n        return 1;\n    } else {\n        final double dev = x - mean;\n        try {\n            return 0.5 * (1.0 + Erf.erf((dev) /\n                    (standardDeviation * FastMath.sqrt(2.0))));\n        } catch (MaxIterationsExceededException ex) {\n            if (x < (mean - 20 * standardDeviation)) {\n                return 0;\n            } else if (x > (mean + 20 * standardDeviation)) {\n                return 1;\n            } else {\n                throw ex;\n            }\n        }\n    }\n}"
    ]
  }
}
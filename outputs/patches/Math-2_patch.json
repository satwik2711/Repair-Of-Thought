{
  "Math-2": {
    "prompt": [
      "You are a Senior Level Programmer with expertise in debugging and code repair. Your task is to review the provided function and produce a corrected, function-level implementation that fully addresses the identified bug.\n\n@@ Context\n// Provide a fix for the buggy function.\nRoot cause: The issue lies in the getNumericalMean() function, which calculates the mean of the Hypergeometric distribution. The function uses the formula (n * m) / N, but it does not handle the case where the result is negative due to integer overflow. Since the variables n, m, and N are integers, the multiplication of n and m can exceed the maximum limit of an integer, resulting in a negative value. This negative value is then assigned to the sample variable, causing the assertion error.\nSuggestion: Using Long Data Type for Intermediate Calculations\nOne possible solution is to use the long data type for the intermediate calculations in the getNumericalMean() function. This can prevent integer overflow and ensure that the result is accurate. The modified function would look like this:\npublic double getNumericalMean() {\n    long numerator = (long) getSampleSize() * getNumberOfSuccesses();\n    return (double) numerator / (double) getPopulationSize();\n}\n// Buggy Function\npublic double getNumericalMean() {\n    return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();\n}\n// Fixed Function\n\n@@ Instructions\n1. Carefully analyze the provided root cause and fix suggestion.\n2. Ensure your implementation completely resolves the identified issue.\n3. Maintain the original method signature.\n4. Preserve the original functionality and coding style as much as possible.\n5. Incorporate all working parts of the original implementation.\n6. Follow the provided fix suggestion without over-engineering or introducing unnecessary changes.\n\n@@ Response Format\nReturn ONLY the complete fixed function wrapped in ```java\n<your implementation>\n``` tags.\n\n@@ Important Notes\n- Do not add unnecessary optimizations.\n- Do not modify the method signature.\n- Maintain the original variable names and overall coding style wherever possible.",
      "You are a Senior Level Programmer with expertise in debugging and code repair. Your task is to review the provided function and produce a corrected, function-level implementation that fully addresses the identified bug.\n\n@@ Context\n// Provide a fix for the buggy function.\nRoot cause: The issue lies in the getNumericalMean() function, which calculates the mean of the Hypergeometric distribution. The function uses the formula (n * m) / N, but it does not handle the case where the result is negative due to integer overflow. Since the variables n, m, and N are integers, the multiplication of n and m can exceed the maximum limit of an integer, resulting in a negative value. This negative value is then assigned to the sample variable, causing the assertion error.\nSuggestion: Using BigInteger for Large Numbers\nAnother possible solution is to use the BigInteger class for handling large numbers. This can provide a more robust solution for cases where the numbers are extremely large. The modified function would look like this:\npublic double getNumericalMean() {\n    BigInteger numerator = BigInteger.valueOf(getSampleSize()).multiply(BigInteger.valueOf(getNumberOfSuccesses()));\n    BigInteger denominator = BigInteger.valueOf(getPopulationSize());\n    return numerator.doubleValue() / denominator.doubleValue();\n}\n// Buggy Function\npublic double getNumericalMean() {\n    return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();\n}\n// Fixed Function\n\n@@ Instructions\n1. Carefully analyze the provided root cause and fix suggestion.\n2. Ensure your implementation completely resolves the identified issue.\n3. Maintain the original method signature.\n4. Preserve the original functionality and coding style as much as possible.\n5. Incorporate all working parts of the original implementation.\n6. Follow the provided fix suggestion without over-engineering or introducing unnecessary changes.\n\n@@ Response Format\nReturn ONLY the complete fixed function wrapped in ```java\n<your implementation>\n``` tags.\n\n@@ Important Notes\n- Do not add unnecessary optimizations.\n- Do not modify the method signature.\n- Maintain the original variable names and overall coding style wherever possible.",
      "You are a Senior Level Programmer with expertise in debugging and code repair. Your task is to review the provided function and produce a corrected, function-level implementation that fully addresses the identified bug.\n\n@@ Context\n// Provide a fix for the buggy function.\nRoot cause: The issue lies in the getNumericalMean() function, which calculates the mean of the Hypergeometric distribution. The function uses the formula (n * m) / N, but it does not handle the case where the result is negative due to integer overflow. Since the variables n, m, and N are integers, the multiplication of n and m can exceed the maximum limit of an integer, resulting in a negative value. This negative value is then assigned to the sample variable, causing the assertion error.\nSuggestion: Checking for Overflow Before Calculation\nA third possible solution is to check for potential overflow before performing the calculation. This can be done by checking if the product of n and m is greater than the maximum limit of an integer. If it is, then an alternative approach can be used to calculate the mean. The modified function would look like this:\npublic double getNumericalMean() {\n    if ((long) getSampleSize() * getNumberOfSuccesses() > Integer.MAX_VALUE) {\n        // use an alternative approach to calculate the mean\n    } else {\n        return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();\n    }\n}\n// Buggy Function\npublic double getNumericalMean() {\n    return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();\n}\n// Fixed Function\n\n@@ Instructions\n1. Carefully analyze the provided root cause and fix suggestion.\n2. Ensure your implementation completely resolves the identified issue.\n3. Maintain the original method signature.\n4. Preserve the original functionality and coding style as much as possible.\n5. Incorporate all working parts of the original implementation.\n6. Follow the provided fix suggestion without over-engineering or introducing unnecessary changes.\n\n@@ Response Format\nReturn ONLY the complete fixed function wrapped in ```java\n<your implementation>\n``` tags.\n\n@@ Important Notes\n- Do not add unnecessary optimizations.\n- Do not modify the method signature.\n- Maintain the original variable names and overall coding style wherever possible."
    ],
    "patches": [
      "public double getNumericalMean() {\n    long numerator = (long) getSampleSize() * getNumberOfSuccesses();\n    return (double) numerator / (double) getPopulationSize();\n}",
      "public double getNumericalMean() {\n    BigInteger n = BigInteger.valueOf(getSampleSize());\n    BigInteger m = BigInteger.valueOf(getNumberOfSuccesses());\n    BigInteger N = BigInteger.valueOf(getPopulationSize());\n    return n.multiply(m).divide(N).doubleValue();\n}",
      "public double getNumericalMean() {\n    long sampleSize = getSampleSize();\n    long numberOfSuccesses = getNumberOfSuccesses();\n    long populationSize = getPopulationSize();\n    return (double) (sampleSize * numberOfSuccesses) / populationSize;\n}"
    ]
  }
}
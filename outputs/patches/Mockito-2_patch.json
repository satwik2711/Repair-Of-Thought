{
  "Mockito-2": {
    "prompt": [
      "You are a Senior Level Programmer with expertise in debugging and code repair. Your task is to review the provided function and produce a corrected, function-level implementation that fully addresses the identified bug.\n\n@@ Context\n// Provide a fix for the buggy function.\nRoot cause: The Timer constructor does not validate the input duration, allowing negative values to be passed in. This can cause unexpected behavior when the Timer is used, and is likely the reason why the test is failing.\nSuggestion: Throw an Exception for Negative Durations\nThrow a FriendlyReminderException or a similar exception when a negative duration is passed to the Timer constructor. This will ensure that the test passes and the Timer is not created with an invalid duration. The updated code would be:\n```java\npublic Timer(long durationMillis) {\n    if (durationMillis < 0) {\n        throw new FriendlyReminderException(\"Duration cannot be negative\");\n    }\n    this.durationMillis = durationMillis;\n}\n```\n// Buggy Function\npublic Timer(long durationMillis) {\n        this.durationMillis = durationMillis;\n    }\n// Fixed Function\n\n@@ Instructions\n1. Carefully analyze the provided root cause and fix suggestion.\n2. Ensure your implementation completely resolves the identified issue.\n3. Maintain the original method signature.\n4. Preserve the original functionality and coding style as much as possible.\n5. Incorporate all working parts of the original implementation.\n6. Follow the provided fix suggestion without over-engineering or introducing unnecessary changes.\n\n@@ Response Format\nReturn ONLY the complete fixed function wrapped in ```java\n<your implementation>\n``` tags.\n\n@@ Important Notes\n- Do not add unnecessary optimizations.\n- Do not modify the method signature.\n- Maintain the original variable names and overall coding style wherever possible.",
      "You are a Senior Level Programmer with expertise in debugging and code repair. Your task is to review the provided function and produce a corrected, function-level implementation that fully addresses the identified bug.\n\n@@ Context\n// Provide a fix for the buggy function.\nRoot cause: The Timer constructor does not validate the input duration, allowing negative values to be passed in. This can cause unexpected behavior when the Timer is used, and is likely the reason why the test is failing.\nSuggestion: Use a Default Duration for Negative Inputs\nInstead of throwing an exception, we could use a default duration (e.g. 0) when a negative duration is passed to the Timer constructor. This would ensure that the Timer is created with a valid duration, but may not be the desired behavior in all cases. The updated code would be:\n```java\npublic Timer(long durationMillis) {\n    if (durationMillis < 0) {\n        durationMillis = 0;\n    }\n    this.durationMillis = durationMillis;\n}\n```\n// Buggy Function\npublic Timer(long durationMillis) {\n        this.durationMillis = durationMillis;\n    }\n// Fixed Function\n\n@@ Instructions\n1. Carefully analyze the provided root cause and fix suggestion.\n2. Ensure your implementation completely resolves the identified issue.\n3. Maintain the original method signature.\n4. Preserve the original functionality and coding style as much as possible.\n5. Incorporate all working parts of the original implementation.\n6. Follow the provided fix suggestion without over-engineering or introducing unnecessary changes.\n\n@@ Response Format\nReturn ONLY the complete fixed function wrapped in ```java\n<your implementation>\n``` tags.\n\n@@ Important Notes\n- Do not add unnecessary optimizations.\n- Do not modify the method signature.\n- Maintain the original variable names and overall coding style wherever possible.",
      "You are a Senior Level Programmer with expertise in debugging and code repair. Your task is to review the provided function and produce a corrected, function-level implementation that fully addresses the identified bug.\n\n@@ Context\n// Provide a fix for the buggy function.\nRoot cause: The Timer constructor does not validate the input duration, allowing negative values to be passed in. This can cause unexpected behavior when the Timer is used, and is likely the reason why the test is failing.\nSuggestion: Validate and Normalize the Duration\nWe could validate the input duration and normalize it to a non-negative value. For example, we could take the absolute value of the input duration. This would ensure that the Timer is created with a valid duration, and would provide a more robust solution. The updated code would be:\n```java\npublic Timer(long durationMillis) {\n    this.durationMillis = Math.abs(durationMillis);\n}\n```\n// Buggy Function\npublic Timer(long durationMillis) {\n        this.durationMillis = durationMillis;\n    }\n// Fixed Function\n\n@@ Instructions\n1. Carefully analyze the provided root cause and fix suggestion.\n2. Ensure your implementation completely resolves the identified issue.\n3. Maintain the original method signature.\n4. Preserve the original functionality and coding style as much as possible.\n5. Incorporate all working parts of the original implementation.\n6. Follow the provided fix suggestion without over-engineering or introducing unnecessary changes.\n\n@@ Response Format\nReturn ONLY the complete fixed function wrapped in ```java\n<your implementation>\n``` tags.\n\n@@ Important Notes\n- Do not add unnecessary optimizations.\n- Do not modify the method signature.\n- Maintain the original variable names and overall coding style wherever possible."
    ],
    "patches": [
      "public Timer(long durationMillis) {\n    if (durationMillis < 0) {\n        throw new FriendlyReminderException(\"Duration cannot be negative\");\n    }\n    this.durationMillis = durationMillis;\n}",
      "public Timer(long durationMillis) {\n    if (durationMillis < 0) {\n        durationMillis = 0;\n    }\n    this.durationMillis = durationMillis;\n}",
      "public Timer(long durationMillis) {\n    this.durationMillis = Math.abs(durationMillis);\n}"
    ]
  }
}
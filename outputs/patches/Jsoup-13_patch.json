{
  "Jsoup-13": {
    "prompt": [
      "You are a Senior Level Programmer with expertise in debugging and code repair. Your task is to review the provided function and produce a corrected, function-level implementation that fully addresses the identified bug.\n\n@@ Context\n// Provide a fix for the buggy function.\nRoot cause: The 'hasAttr' function is not correctly identifying the 'abs:href' attribute because it is checking for the exact key 'abs:href' in the attributes map, but the 'abs:href' attribute is not a real attribute in the HTML element. It's a pseudo-attribute that is generated by the 'attr' function when it encounters a relative URL.\nSuggestion: Check for Pseudo-Attributes\nThe 'hasAttr' function should be modified to check for pseudo-attributes like 'abs:href'. This can be done by checking if the attribute key starts with 'abs:' and then checking if the corresponding attribute without the 'abs:' prefix exists.\n// Buggy Function\npublic boolean hasAttr(String attributeKey) {\n    Validate.notNull(attributeKey);\n\n    return attributes.hasKey(attributeKey);\n}\n// Fixed Function\n\n@@ Instructions\n1. Carefully analyze the provided root cause and fix suggestion.\n2. Ensure your implementation completely resolves the identified issue.\n3. Maintain the original method signature.\n4. Preserve the original functionality and coding style as much as possible.\n5. Incorporate all working parts of the original implementation.\n6. Follow the provided fix suggestion without over-engineering or introducing unnecessary changes.\n\n@@ Response Format\nReturn ONLY the complete fixed function wrapped in ```java\n<your implementation>\n``` tags.\n\n@@ Important Notes\n- Do not add unnecessary optimizations.\n- Do not modify the method signature.\n- Maintain the original variable names and overall coding style wherever possible.",
      "You are a Senior Level Programmer with expertise in debugging and code repair. Your task is to review the provided function and produce a corrected, function-level implementation that fully addresses the identified bug.\n\n@@ Context\n// Provide a fix for the buggy function.\nRoot cause: The 'hasAttr' function is not correctly identifying the 'abs:href' attribute because it is checking for the exact key 'abs:href' in the attributes map, but the 'abs:href' attribute is not a real attribute in the HTML element. It's a pseudo-attribute that is generated by the 'attr' function when it encounters a relative URL.\nSuggestion: Use the 'attr' Function to Check for Attributes\nThe 'hasAttr' function can be modified to use the 'attr' function to check if an attribute exists. The 'attr' function can handle pseudo-attributes like 'abs:href' correctly.\n// Buggy Function\npublic boolean hasAttr(String attributeKey) {\n    Validate.notNull(attributeKey);\n\n    return attributes.hasKey(attributeKey);\n}\n// Fixed Function\n\n@@ Instructions\n1. Carefully analyze the provided root cause and fix suggestion.\n2. Ensure your implementation completely resolves the identified issue.\n3. Maintain the original method signature.\n4. Preserve the original functionality and coding style as much as possible.\n5. Incorporate all working parts of the original implementation.\n6. Follow the provided fix suggestion without over-engineering or introducing unnecessary changes.\n\n@@ Response Format\nReturn ONLY the complete fixed function wrapped in ```java\n<your implementation>\n``` tags.\n\n@@ Important Notes\n- Do not add unnecessary optimizations.\n- Do not modify the method signature.\n- Maintain the original variable names and overall coding style wherever possible.",
      "You are a Senior Level Programmer with expertise in debugging and code repair. Your task is to review the provided function and produce a corrected, function-level implementation that fully addresses the identified bug.\n\n@@ Context\n// Provide a fix for the buggy function.\nRoot cause: The 'hasAttr' function is not correctly identifying the 'abs:href' attribute because it is checking for the exact key 'abs:href' in the attributes map, but the 'abs:href' attribute is not a real attribute in the HTML element. It's a pseudo-attribute that is generated by the 'attr' function when it encounters a relative URL.\nSuggestion: Add a Special Case for 'abs:href'\nThe 'hasAttr' function can be modified to add a special case for the 'abs:href' attribute. This can be done by checking if the attribute key is 'abs:href' and then checking if the 'href' attribute exists and its value is a relative URL.\n\n\",\n    \"next_action\": \"final_answer\"\n}\n// Buggy Function\npublic boolean hasAttr(String attributeKey) {\n    Validate.notNull(attributeKey);\n\n    return attributes.hasKey(attributeKey);\n}\n// Fixed Function\n\n@@ Instructions\n1. Carefully analyze the provided root cause and fix suggestion.\n2. Ensure your implementation completely resolves the identified issue.\n3. Maintain the original method signature.\n4. Preserve the original functionality and coding style as much as possible.\n5. Incorporate all working parts of the original implementation.\n6. Follow the provided fix suggestion without over-engineering or introducing unnecessary changes.\n\n@@ Response Format\nReturn ONLY the complete fixed function wrapped in ```java\n<your implementation>\n``` tags.\n\n@@ Important Notes\n- Do not add unnecessary optimizations.\n- Do not modify the method signature.\n- Maintain the original variable names and overall coding style wherever possible."
    ],
    "patches": [
      "public boolean hasAttr(String attributeKey) {\n    Validate.notNull(attributeKey);\n\n    if (attributeKey.startsWith(\"abs:\")) {\n        String realAttribute = attributeKey.substring(4);\n        return attributes.hasKey(realAttribute);\n    }\n    return attributes.hasKey(attributeKey);\n}",
      "public boolean hasAttr(String attributeKey) {\n    Validate.notNull(attributeKey);\n\n    return attr(attributeKey) != null;\n}",
      "public boolean hasAttr(String attributeKey) {\n    Validate.notNull(attributeKey);\n\n    if (\"abs:href\".equals(attributeKey)) {\n        if (attributes.containsKey(\"href\")) {\n            String hrefValue = attributes.get(\"href\");\n            if (hrefValue != null && !hrefValue.startsWith(\"http://\") && !hrefValue.startsWith(\"https://\")) {\n                return true;\n            }\n        }\n        return false;\n    } else {\n        return attributes.containsKey(attributeKey);\n    }\n}"
    ]
  }
}
{
  "JacksonDatabind-93": {
    "prompt": [
      "You are a Senior Level Programmer with expertise in debugging and code repair. Your task is to review the provided function and produce a corrected, function-level implementation that fully addresses the identified bug.\n\n@@ Context\n// Provide a fix for the buggy function.\nRoot cause: The `NullPointerException` is caused by the `cls.getSimpleName()` call in the `validateSubType` function. This is because the `cls` variable is `null` when the `getSuperclass()` method returns `null` for the `Object` class. This happens when the `raw` class is an interface, not a class, and therefore does not have a superclass.\nSuggestion: Add Null Check for cls Variable\nAdd a null check for the `cls` variable before calling `getSimpleName()` on it. This will prevent the `NullPointerException` from occurring.\n\n```java\nif (cls != null) {\n    String name = cls.getSimpleName();\n    // ...\n}\n```\n// Buggy Function\npublic void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException\n{\n    // There are certain nasty classes that could cause problems, mostly\n    // via default typing -- catch them here.\n    final Class<?> raw = type.getRawClass();\n    String full = raw.getName();\n\n    main_check:\n    do {\n        if (_cfgIllegalClassNames.contains(full)) {\n            break;\n        }\n\n        // 18-Dec-2017, tatu: As per [databind#1855], need bit more sophisticated handling\n        //    for some Spring framework types\n        // 05-Jan-2017, tatu: ... also, only applies to classes, not interfaces\n        if (full.startsWith(PREFIX_STRING)) {\n            for (Class<?> cls = raw; cls != Object.class; cls = cls.getSuperclass()) {\n                String name = cls.getSimpleName();\n                // looking for \"AbstractBeanFactoryPointcutAdvisor\" but no point to allow any is there?\n                if (\"AbstractPointcutAdvisor\".equals(name)\n                        // ditto  for \"FileSystemXmlApplicationContext\": block all ApplicationContexts\n                        || \"AbstractApplicationContext\".equals(name)) {\n                    break main_check;\n                }\n            }\n        }\n        return;\n    } while (false);\n\n    throw JsonMappingException.from(ctxt,\n            String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full));\n}\n// Fixed Function\n\n@@ Instructions\n1. Carefully analyze the provided root cause and fix suggestion.\n2. Ensure your implementation completely resolves the identified issue.\n3. Maintain the original method signature.\n4. Preserve the original functionality and coding style as much as possible.\n5. Incorporate all working parts of the original implementation.\n6. Follow the provided fix suggestion without over-engineering or introducing unnecessary changes.\n\n@@ Response Format\nReturn ONLY the complete fixed function wrapped in ```java\n<your implementation>\n``` tags.\n\n@@ Important Notes\n- Do not add unnecessary optimizations.\n- Do not modify the method signature.\n- Maintain the original variable names and overall coding style wherever possible.",
      "You are a Senior Level Programmer with expertise in debugging and code repair. Your task is to review the provided function and produce a corrected, function-level implementation that fully addresses the identified bug.\n\n@@ Context\n// Provide a fix for the buggy function.\nRoot cause: The `NullPointerException` is caused by the `cls.getSimpleName()` call in the `validateSubType` function. This is because the `cls` variable is `null` when the `getSuperclass()` method returns `null` for the `Object` class. This happens when the `raw` class is an interface, not a class, and therefore does not have a superclass.\nSuggestion: Check if cls is a Class\nAdd a check to ensure that `cls` is a class, not an interface, before trying to get its superclass. This will prevent the `NullPointerException` from occurring.\n\n```java\nif (cls.isAssignableFrom(Class.class)) {\n    cls = cls.getSuperclass();\n    // ...\n}\n```\n// Buggy Function\npublic void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException\n{\n    // There are certain nasty classes that could cause problems, mostly\n    // via default typing -- catch them here.\n    final Class<?> raw = type.getRawClass();\n    String full = raw.getName();\n\n    main_check:\n    do {\n        if (_cfgIllegalClassNames.contains(full)) {\n            break;\n        }\n\n        // 18-Dec-2017, tatu: As per [databind#1855], need bit more sophisticated handling\n        //    for some Spring framework types\n        // 05-Jan-2017, tatu: ... also, only applies to classes, not interfaces\n        if (full.startsWith(PREFIX_STRING)) {\n            for (Class<?> cls = raw; cls != Object.class; cls = cls.getSuperclass()) {\n                String name = cls.getSimpleName();\n                // looking for \"AbstractBeanFactoryPointcutAdvisor\" but no point to allow any is there?\n                if (\"AbstractPointcutAdvisor\".equals(name)\n                        // ditto  for \"FileSystemXmlApplicationContext\": block all ApplicationContexts\n                        || \"AbstractApplicationContext\".equals(name)) {\n                    break main_check;\n                }\n            }\n        }\n        return;\n    } while (false);\n\n    throw JsonMappingException.from(ctxt,\n            String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full));\n}\n// Fixed Function\n\n@@ Instructions\n1. Carefully analyze the provided root cause and fix suggestion.\n2. Ensure your implementation completely resolves the identified issue.\n3. Maintain the original method signature.\n4. Preserve the original functionality and coding style as much as possible.\n5. Incorporate all working parts of the original implementation.\n6. Follow the provided fix suggestion without over-engineering or introducing unnecessary changes.\n\n@@ Response Format\nReturn ONLY the complete fixed function wrapped in ```java\n<your implementation>\n``` tags.\n\n@@ Important Notes\n- Do not add unnecessary optimizations.\n- Do not modify the method signature.\n- Maintain the original variable names and overall coding style wherever possible.",
      "You are a Senior Level Programmer with expertise in debugging and code repair. Your task is to review the provided function and produce a corrected, function-level implementation that fully addresses the identified bug.\n\n@@ Context\n// Provide a fix for the buggy function.\nRoot cause: The `NullPointerException` is caused by the `cls.getSimpleName()` call in the `validateSubType` function. This is because the `cls` variable is `null` when the `getSuperclass()` method returns `null` for the `Object` class. This happens when the `raw` class is an interface, not a class, and therefore does not have a superclass.\nSuggestion: Use getDeclaringClass() instead of getSuperclass()\nInstead of using `getSuperclass()` to get the superclass of `cls`, use `getDeclaringClass()` to get the class that declares `cls`. This will prevent the `NullPointerException` from occurring.\n\n```java\ncls = cls.getDeclaringClass();\n// ...\n```\n// Buggy Function\npublic void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException\n{\n    // There are certain nasty classes that could cause problems, mostly\n    // via default typing -- catch them here.\n    final Class<?> raw = type.getRawClass();\n    String full = raw.getName();\n\n    main_check:\n    do {\n        if (_cfgIllegalClassNames.contains(full)) {\n            break;\n        }\n\n        // 18-Dec-2017, tatu: As per [databind#1855], need bit more sophisticated handling\n        //    for some Spring framework types\n        // 05-Jan-2017, tatu: ... also, only applies to classes, not interfaces\n        if (full.startsWith(PREFIX_STRING)) {\n            for (Class<?> cls = raw; cls != Object.class; cls = cls.getSuperclass()) {\n                String name = cls.getSimpleName();\n                // looking for \"AbstractBeanFactoryPointcutAdvisor\" but no point to allow any is there?\n                if (\"AbstractPointcutAdvisor\".equals(name)\n                        // ditto  for \"FileSystemXmlApplicationContext\": block all ApplicationContexts\n                        || \"AbstractApplicationContext\".equals(name)) {\n                    break main_check;\n                }\n            }\n        }\n        return;\n    } while (false);\n\n    throw JsonMappingException.from(ctxt,\n            String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full));\n}\n// Fixed Function\n\n@@ Instructions\n1. Carefully analyze the provided root cause and fix suggestion.\n2. Ensure your implementation completely resolves the identified issue.\n3. Maintain the original method signature.\n4. Preserve the original functionality and coding style as much as possible.\n5. Incorporate all working parts of the original implementation.\n6. Follow the provided fix suggestion without over-engineering or introducing unnecessary changes.\n\n@@ Response Format\nReturn ONLY the complete fixed function wrapped in ```java\n<your implementation>\n``` tags.\n\n@@ Important Notes\n- Do not add unnecessary optimizations.\n- Do not modify the method signature.\n- Maintain the original variable names and overall coding style wherever possible."
    ],
    "patches": [
      "public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException\n{\n    // There are certain nasty classes that could cause problems, mostly\n    // via default typing -- catch them here.\n    final Class<?> raw = type.getRawClass();\n    String full = raw.getName();\n\n    main_check:\n    do {\n        if (_cfgIllegalClassNames.contains(full)) {\n            break;\n        }\n\n        // 18-Dec-2017, tatu: As per [databind#1855], need bit more sophisticated handling\n        //    for some Spring framework types\n        // 05-Jan-2017, tatu: ... also, only applies to classes, not interfaces\n        if (full.startsWith(PREFIX_STRING)) {\n            for (Class<?> cls = raw; cls != Object.class; cls = cls.getSuperclass()) {\n                if (cls == null) {\n                    break;\n                }\n                String name = cls.getSimpleName();\n                // looking for \"AbstractBeanFactoryPointcutAdvisor\" but no point to allow any is there?\n                if (\"AbstractPointcutAdvisor\".equals(name)\n                        // ditto  for \"FileSystemXmlApplicationContext\": block all ApplicationContexts\n                        || \"AbstractApplicationContext\".equals(name)) {\n                    break main_check;\n                }\n            }\n        }\n        return;\n    } while (false);\n\n    throw JsonMappingException.from(ctxt,\n            String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full));\n}",
      "public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException\n{\n    // There are certain nasty classes that could cause problems, mostly\n    // via default typing -- catch them here.\n    final Class<?> raw = type.getRawClass();\n    String full = raw.getName();\n\n    main_check:\n    do {\n        if (_cfgIllegalClassNames.contains(full)) {\n            break;\n        }\n\n        // 18-Dec-2017, tatu: As per [databind#1855], need bit more sophisticated handling\n        //    for some Spring framework types\n        // 05-Jan-2017, tatu: ... also, only applies to classes, not interfaces\n        if (full.startsWith(PREFIX_STRING)) {\n            for (Class<?> cls = raw; cls != null && cls != Object.class; cls = cls.getSuperclass()) {\n                String name = cls.getSimpleName();\n                // looking for \"AbstractBeanFactoryPointcutAdvisor\" but no point to allow any is there?\n                if (\"AbstractPointcutAdvisor\".equals(name)\n                        // ditto  for \"FileSystemXmlApplicationContext\": block all ApplicationContexts\n                        || \"AbstractApplicationContext\".equals(name)) {\n                    break main_check;\n                }\n            }\n        }\n        return;\n    } while (false);\n\n    throw JsonMappingException.from(ctxt,\n            String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full));\n}",
      "public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException\n{\n    // There are certain nasty classes that could cause problems, mostly\n    // via default typing -- catch them here.\n    final Class<?> raw = type.getRawClass();\n    String full = raw.getName();\n\n    main_check:\n    do {\n        if (_cfgIllegalClassNames.contains(full)) {\n            break;\n        }\n\n        // 18-Dec-2017, tatu: As per [databind#1855], need bit more sophisticated handling\n        //    for some Spring framework types\n        // 05-Jan-2017, tatu: ... also, only applies to classes, not interfaces\n        if (full.startsWith(PREFIX_STRING)) {\n            for (Class<?> cls = raw; cls != null && cls != Object.class; cls = cls.getSuperclass()) {\n                String name = cls.getSimpleName();\n                // looking for \"AbstractBeanFactoryPointcutAdvisor\" but no point to allow any is there?\n                if (\"AbstractPointcutAdvisor\".equals(name)\n                        // ditto  for \"FileSystemXmlApplicationContext\": block all ApplicationContexts\n                        || \"AbstractApplicationContext\".equals(name)) {\n                    break main_check;\n                }\n            }\n        }\n        return;\n    } while (false);\n\n    throw JsonMappingException.from(ctxt,\n            String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full));\n}"
    ]
  }
}
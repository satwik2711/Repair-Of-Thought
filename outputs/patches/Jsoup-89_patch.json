{
  "Jsoup-89": {
    "prompt": [
      "You are a Senior Level Programmer with expertise in debugging and code repair. Your task is to review the provided function and produce a corrected, function-level implementation that fully addresses the identified bug.\n\n@@ Context\n// Provide a fix for the buggy function.\nRoot cause: The root cause of the bug is that the `setValue` function does not check if the `parent` object is null before calling `parent.get(this.key)`. This is a classic example of a null pointer exception. The function assumes that the `parent` object is always non-null, which is not the case in the trigger test.\nSuggestion: Check for Null Parent\nOne possible fix is to add a null check for the `parent` object before calling `parent.get(this.key)`. If the `parent` object is null, we can simply return the current value of the attribute. Here's the modified code:\n```java\npublic String setValue(String val) {\n    String oldVal = this.val;\n    if (parent != null) {\n        int i = parent.indexOfKey(this.key);\n        if (i != Attributes.NotFound)\n            parent.vals[i] = val;\n    }\n    this.val = val;\n    return oldVal;\n}\n```\n// Buggy Function\npublic String setValue(String val) {\n    String oldVal = parent.get(this.key);\n    if (parent != null) {\n        int i = parent.indexOfKey(this.key);\n        if (i != Attributes.NotFound)\n            parent.vals[i] = val;\n    }\n    this.val = val;\n    return Attributes.checkNotNull(oldVal);\n}\n// Fixed Function\n\n@@ Instructions\n1. Carefully analyze the provided root cause and fix suggestion.\n2. Ensure your implementation completely resolves the identified issue.\n3. Maintain the original method signature.\n4. Preserve the original functionality and coding style as much as possible.\n5. Incorporate all working parts of the original implementation.\n6. Follow the provided fix suggestion without over-engineering or introducing unnecessary changes.\n\n@@ Response Format\nReturn ONLY the complete fixed function wrapped in ```java\n<your implementation>\n``` tags.\n\n@@ Important Notes\n- Do not add unnecessary optimizations.\n- Do not modify the method signature.\n- Maintain the original variable names and overall coding style wherever possible.",
      "You are a Senior Level Programmer with expertise in debugging and code repair. Your task is to review the provided function and produce a corrected, function-level implementation that fully addresses the identified bug.\n\n@@ Context\n// Provide a fix for the buggy function.\nRoot cause: The root cause of the bug is that the `setValue` function does not check if the `parent` object is null before calling `parent.get(this.key)`. This is a classic example of a null pointer exception. The function assumes that the `parent` object is always non-null, which is not the case in the trigger test.\nSuggestion: Throw an Exception\nAnother possible fix is to throw an exception when the `parent` object is null. This approach ensures that the `setValue` function is not called on an orphan attribute. Here's the modified code:\n```java\npublic String setValue(String val) {\n    if (parent == null) {\n        throw new IllegalStateException(\"Cannot set value on an orphan attribute\");\n    }\n    String oldVal = parent.get(this.key);\n    int i = parent.indexOfKey(this.key);\n    if (i != Attributes.NotFound)\n        parent.vals[i] = val;\n    this.val = val;\n    return oldVal;\n}\n```\n// Buggy Function\npublic String setValue(String val) {\n    String oldVal = parent.get(this.key);\n    if (parent != null) {\n        int i = parent.indexOfKey(this.key);\n        if (i != Attributes.NotFound)\n            parent.vals[i] = val;\n    }\n    this.val = val;\n    return Attributes.checkNotNull(oldVal);\n}\n// Fixed Function\n\n@@ Instructions\n1. Carefully analyze the provided root cause and fix suggestion.\n2. Ensure your implementation completely resolves the identified issue.\n3. Maintain the original method signature.\n4. Preserve the original functionality and coding style as much as possible.\n5. Incorporate all working parts of the original implementation.\n6. Follow the provided fix suggestion without over-engineering or introducing unnecessary changes.\n\n@@ Response Format\nReturn ONLY the complete fixed function wrapped in ```java\n<your implementation>\n``` tags.\n\n@@ Important Notes\n- Do not add unnecessary optimizations.\n- Do not modify the method signature.\n- Maintain the original variable names and overall coding style wherever possible.",
      "You are a Senior Level Programmer with expertise in debugging and code repair. Your task is to review the provided function and produce a corrected, function-level implementation that fully addresses the identified bug.\n\n@@ Context\n// Provide a fix for the buggy function.\nRoot cause: The root cause of the bug is that the `setValue` function does not check if the `parent` object is null before calling `parent.get(this.key)`. This is a classic example of a null pointer exception. The function assumes that the `parent` object is always non-null, which is not the case in the trigger test.\nSuggestion: Use Optional\nA third possible fix is to use the `Optional` class to handle the case where the `parent` object is null. Here's the modified code:\n```java\npublic String setValue(String val) {\n    String oldVal = Optional.ofNullable(parent).map(p -> p.get(this.key)).orElse(this.val);\n    if (parent != null) {\n        int i = parent.indexOfKey(this.key);\n        if (i != Attributes.NotFound)\n            parent.vals[i] = val;\n    }\n    this.val = val;\n    return oldVal;\n}\n```\n// Buggy Function\npublic String setValue(String val) {\n    String oldVal = parent.get(this.key);\n    if (parent != null) {\n        int i = parent.indexOfKey(this.key);\n        if (i != Attributes.NotFound)\n            parent.vals[i] = val;\n    }\n    this.val = val;\n    return Attributes.checkNotNull(oldVal);\n}\n// Fixed Function\n\n@@ Instructions\n1. Carefully analyze the provided root cause and fix suggestion.\n2. Ensure your implementation completely resolves the identified issue.\n3. Maintain the original method signature.\n4. Preserve the original functionality and coding style as much as possible.\n5. Incorporate all working parts of the original implementation.\n6. Follow the provided fix suggestion without over-engineering or introducing unnecessary changes.\n\n@@ Response Format\nReturn ONLY the complete fixed function wrapped in ```java\n<your implementation>\n``` tags.\n\n@@ Important Notes\n- Do not add unnecessary optimizations.\n- Do not modify the method signature.\n- Maintain the original variable names and overall coding style wherever possible."
    ],
    "patches": [
      "public String setValue(String val) {\n    String oldVal;\n    if (parent != null) {\n        oldVal = parent.get(this.key);\n    } else {\n        oldVal = this.val;\n    }\n    if (parent != null) {\n        int i = parent.indexOfKey(this.key);\n        if (i != Attributes.NotFound) {\n            parent.vals[i] = val;\n        }\n    }\n    this.val = val;\n    return Attributes.checkNotNull(oldVal);\n}",
      "public String setValue(String val) {\n    if (parent == null) {\n        throw new IllegalStateException(\"Cannot set value on an orphan attribute\");\n    }\n    String oldVal = parent.get(this.key);\n    int i = parent.indexOfKey(this.key);\n    if (i != Attributes.NotFound)\n        parent.vals[i] = val;\n    this.val = val;\n    return Attributes.checkNotNull(oldVal);\n}",
      "public String setValue(String val) {\n    String oldVal = Optional.ofNullable(parent).map(p -> p.get(this.key)).orElse(this.val);\n    if (parent != null) {\n        int i = parent.indexOfKey(this.key);\n        if (i != Attributes.NotFound)\n            parent.vals[i] = val;\n    }\n    this.val = val;\n    return oldVal;\n}"
    ]
  }
}
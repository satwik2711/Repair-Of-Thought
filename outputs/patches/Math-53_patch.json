{
  "Math-53": {
    "prompt": [
      "You are a Senior Level Programmer with expertise in debugging and code repair. Your task is to review the provided function and produce a corrected, function-level implementation that fully addresses the identified bug.\n\n@@ Context\n// Provide a fix for the buggy function.\nRoot cause: The root cause of the bug is that the function is not checking if the real or imaginary parts of the input complex numbers are NaN before performing the addition. As a result, when a NaN value is encountered, it is not being propagated correctly to the result.\nSuggestion: Check for NaN before performing addition\nCheck if the real or imaginary parts of the input complex numbers are NaN before performing the addition. If either part is NaN, return a complex number with NaN as both its real and imaginary parts. This can be achieved by adding a simple if statement to check for NaN values.\n// Buggy Function\npublic Complex add(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n    return createComplex(real + rhs.getReal(),\n        imaginary + rhs.getImaginary());\n}\n// Fixed Function\n\n@@ Instructions\n1. Carefully analyze the provided root cause and fix suggestion.\n2. Ensure your implementation completely resolves the identified issue.\n3. Maintain the original method signature.\n4. Preserve the original functionality and coding style as much as possible.\n5. Incorporate all working parts of the original implementation.\n6. Follow the provided fix suggestion without over-engineering or introducing unnecessary changes.\n\n@@ Response Format\nReturn ONLY the complete fixed function wrapped in ```java\n<your implementation>\n``` tags.\n\n@@ Important Notes\n- Do not add unnecessary optimizations.\n- Do not modify the method signature.\n- Maintain the original variable names and overall coding style wherever possible.",
      "You are a Senior Level Programmer with expertise in debugging and code repair. Your task is to review the provided function and produce a corrected, function-level implementation that fully addresses the identified bug.\n\n@@ Context\n// Provide a fix for the buggy function.\nRoot cause: The root cause of the bug is that the function is not checking if the real or imaginary parts of the input complex numbers are NaN before performing the addition. As a result, when a NaN value is encountered, it is not being propagated correctly to the result.\nSuggestion: Use Double.isNaN to check for NaN\nUse the Double.isNaN function to check if the real or imaginary parts of the input complex numbers are NaN. If either part is NaN, return a complex number with NaN as both its real and imaginary parts. This approach is more explicit and clear in its intention.\n// Buggy Function\npublic Complex add(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n    return createComplex(real + rhs.getReal(),\n        imaginary + rhs.getImaginary());\n}\n// Fixed Function\n\n@@ Instructions\n1. Carefully analyze the provided root cause and fix suggestion.\n2. Ensure your implementation completely resolves the identified issue.\n3. Maintain the original method signature.\n4. Preserve the original functionality and coding style as much as possible.\n5. Incorporate all working parts of the original implementation.\n6. Follow the provided fix suggestion without over-engineering or introducing unnecessary changes.\n\n@@ Response Format\nReturn ONLY the complete fixed function wrapped in ```java\n<your implementation>\n``` tags.\n\n@@ Important Notes\n- Do not add unnecessary optimizations.\n- Do not modify the method signature.\n- Maintain the original variable names and overall coding style wherever possible.",
      "You are a Senior Level Programmer with expertise in debugging and code repair. Your task is to review the provided function and produce a corrected, function-level implementation that fully addresses the identified bug.\n\n@@ Context\n// Provide a fix for the buggy function.\nRoot cause: The root cause of the bug is that the function is not checking if the real or imaginary parts of the input complex numbers are NaN before performing the addition. As a result, when a NaN value is encountered, it is not being propagated correctly to the result.\nSuggestion: Propagate NaN values\nPropagate NaN values from the input complex numbers to the result. If either the real or imaginary part of the input complex number is NaN, set the corresponding part of the result to NaN. This approach ensures that NaN values are correctly propagated to the result, even if the other part of the complex number is not NaN.\n\nHere is the debugged code for\n// Buggy Function\npublic Complex add(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n    return createComplex(real + rhs.getReal(),\n        imaginary + rhs.getImaginary());\n}\n// Fixed Function\n\n@@ Instructions\n1. Carefully analyze the provided root cause and fix suggestion.\n2. Ensure your implementation completely resolves the identified issue.\n3. Maintain the original method signature.\n4. Preserve the original functionality and coding style as much as possible.\n5. Incorporate all working parts of the original implementation.\n6. Follow the provided fix suggestion without over-engineering or introducing unnecessary changes.\n\n@@ Response Format\nReturn ONLY the complete fixed function wrapped in ```java\n<your implementation>\n``` tags.\n\n@@ Important Notes\n- Do not add unnecessary optimizations.\n- Do not modify the method signature.\n- Maintain the original variable names and overall coding style wherever possible.",
      "You are a Senior Level Programmer with expertise in debugging and code repair. Your task is to review the provided function and produce a corrected, function-level implementation that fully addresses the identified bug.\n\n@@ Context\n// Provide a fix for the buggy function.\nRoot cause: The root cause of the bug is that the function is not checking if the real or imaginary parts of the input complex numbers are NaN before performing the addition. As a result, when a NaN value is encountered, it is not being propagated correctly to the result.\nSuggestion: ```java\npublic Complex add(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n    if (Double.isNaN(real) || Double.isNaN(imaginary) || Double.isNaN(rhs.getReal()) || Double.isNaN(rhs.getImaginary())) {\n        return Complex.NaN;\n    }\n    return createComplex(real + rhs.getReal(),\n        imaginary + rhs.getImaginary());\n}\n```\n// Buggy Function\npublic Complex add(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n    return createComplex(real + rhs.getReal(),\n        imaginary + rhs.getImaginary());\n}\n// Fixed Function\n\n@@ Instructions\n1. Carefully analyze the provided root cause and fix suggestion.\n2. Ensure your implementation completely resolves the identified issue.\n3. Maintain the original method signature.\n4. Preserve the original functionality and coding style as much as possible.\n5. Incorporate all working parts of the original implementation.\n6. Follow the provided fix suggestion without over-engineering or introducing unnecessary changes.\n\n@@ Response Format\nReturn ONLY the complete fixed function wrapped in ```java\n<your implementation>\n``` tags.\n\n@@ Important Notes\n- Do not add unnecessary optimizations.\n- Do not modify the method signature.\n- Maintain the original variable names and overall coding style wherever possible."
    ],
    "patches": [
      "public Complex add(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n    double rhsReal = rhs.getReal();\n    double rhsImaginary = rhs.getImaginary();\n    \n    if (Double.isNaN(real) || Double.isNaN(rhsReal) || Double.isNaN(imaginary) || Double.isNaN(rhsImaginary)) {\n        return createComplex(Double.NaN, Double.NaN);\n    }\n    \n    return createComplex(real + rhsReal, imaginary + rhsImaginary);\n}",
      "public Complex add(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n    double rhsReal = rhs.getReal();\n    double rhsImaginary = rhs.getImaginary();\n\n    if (Double.isNaN(real) || Double.isNaN(rhsReal) || Double.isNaN(imaginary) || Double.isNaN(rhsImaginary)) {\n        return createComplex(Double.NaN, Double.NaN);\n    } else {\n        return createComplex(real + rhsReal, imaginary + rhsImaginary);\n    }\n}",
      "public Complex add(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n    double newReal = Double.isNaN(real) || Double.isNaN(rhs.getReal()) ? Double.NaN : (real + rhs.getReal());\n    double newImaginary = Double.isNaN(imaginary) || Double.isNaN(rhs.getImaginary()) ? Double.NaN : (imaginary + rhs.getImaginary());\n    return createComplex(newReal, newImaginary);\n}",
      "public Complex add(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n    if (Double.isNaN(real) || Double.isNaN(imaginary) || Double.isNaN(rhs.getReal()) || Double.isNaN(rhs.getImaginary())) {\n        return Complex.NaN;\n    }\n    return createComplex(real + rhs.getReal(),\n        imaginary + rhs.getImaginary());\n}"
    ]
  }
}
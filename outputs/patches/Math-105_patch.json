{
  "Math-105": {
    "prompt": [
      "You are a Senior Level Programmer with expertise in debugging and code repair. Your task is to review the provided function and produce a corrected, function-level implementation that fully addresses the identified bug.\n\n@@ Context\n// Provide a fix for the buggy function.\nRoot cause: The root cause of the bug is that the function getSumSquaredErrors() does not handle the case where the denominator sumXX is zero or very close to zero, causing a division by zero error or a very large negative result due to rounding errors. This is because the function does not check for this condition before performing the division.\nSuggestion: Check for Division by Zero\nWe can add a simple check before performing the division to ensure that the denominator sumXX is not zero or very close to zero. If it is, we can return a special value, such as Double.NaN or 0, to indicate that the SSE cannot be computed. The modified function would look like this:\n```java\npublic double getSumSquaredErrors() {\n    if (sumXX == 0) {\n        return Double.NaN;\n    }\n    return sumYY - sumXY * sumXY / sumXX;\n}\n```\n// Buggy Function\npublic double getSumSquaredErrors() {\n    return sumYY - sumXY * sumXY / sumXX;\n}\n// Fixed Function\n\n@@ Instructions\n1. Carefully analyze the provided root cause and fix suggestion.\n2. Ensure your implementation completely resolves the identified issue.\n3. Maintain the original method signature.\n4. Preserve the original functionality and coding style as much as possible.\n5. Incorporate all working parts of the original implementation.\n6. Follow the provided fix suggestion without over-engineering or introducing unnecessary changes.\n\n@@ Response Format\nReturn ONLY the complete fixed function wrapped in ```java\n<your implementation>\n``` tags.\n\n@@ Important Notes\n- Do not add unnecessary optimizations.\n- Do not modify the method signature.\n- Maintain the original variable names and overall coding style wherever possible.",
      "You are a Senior Level Programmer with expertise in debugging and code repair. Your task is to review the provided function and produce a corrected, function-level implementation that fully addresses the identified bug.\n\n@@ Context\n// Provide a fix for the buggy function.\nRoot cause: The root cause of the bug is that the function getSumSquaredErrors() does not handle the case where the denominator sumXX is zero or very close to zero, causing a division by zero error or a very large negative result due to rounding errors. This is because the function does not check for this condition before performing the division.\nSuggestion: Use a Tolerance for Division by Zero\nWe can use a tolerance value to determine whether the denominator sumXX is close enough to zero to be considered zero. If it is, we can return a special value, such as Double.NaN or 0, to indicate that the SSE cannot be computed. The modified function would look like this:\n```java\npublic double getSumSquaredErrors() {\n    double tolerance = 1e-12; // adjust this value as needed\n    if (Math.abs(sumXX) < tolerance) {\n        return Double.NaN;\n    }\n    return sumYY - sumXY * sumXY / sumXX;\n}\n```\n// Buggy Function\npublic double getSumSquaredErrors() {\n    return sumYY - sumXY * sumXY / sumXX;\n}\n// Fixed Function\n\n@@ Instructions\n1. Carefully analyze the provided root cause and fix suggestion.\n2. Ensure your implementation completely resolves the identified issue.\n3. Maintain the original method signature.\n4. Preserve the original functionality and coding style as much as possible.\n5. Incorporate all working parts of the original implementation.\n6. Follow the provided fix suggestion without over-engineering or introducing unnecessary changes.\n\n@@ Response Format\nReturn ONLY the complete fixed function wrapped in ```java\n<your implementation>\n``` tags.\n\n@@ Important Notes\n- Do not add unnecessary optimizations.\n- Do not modify the method signature.\n- Maintain the original variable names and overall coding style wherever possible.",
      "You are a Senior Level Programmer with expertise in debugging and code repair. Your task is to review the provided function and produce a corrected, function-level implementation that fully addresses the identified bug.\n\n@@ Context\n// Provide a fix for the buggy function.\nRoot cause: The root cause of the bug is that the function getSumSquaredErrors() does not handle the case where the denominator sumXX is zero or very close to zero, causing a division by zero error or a very large negative result due to rounding errors. This is because the function does not check for this condition before performing the division.\nSuggestion: Use a Special Value for Negative Results\nWe can modify the function to return a special value, such as Double.NaN or 0, if the computed SSE is negative. This will ensure that the returned value is always non-negative, as required by the function's contract. The modified function would look like this:\n```java\npublic double getSumSquaredErrors() {\n    double sse = sumYY - sumXY * sumXY / sumXX;\n    return sse < 0 ? 0 : sse;\n}\n```\n// Buggy Function\npublic double getSumSquaredErrors() {\n    return sumYY - sumXY * sumXY / sumXX;\n}\n// Fixed Function\n\n@@ Instructions\n1. Carefully analyze the provided root cause and fix suggestion.\n2. Ensure your implementation completely resolves the identified issue.\n3. Maintain the original method signature.\n4. Preserve the original functionality and coding style as much as possible.\n5. Incorporate all working parts of the original implementation.\n6. Follow the provided fix suggestion without over-engineering or introducing unnecessary changes.\n\n@@ Response Format\nReturn ONLY the complete fixed function wrapped in ```java\n<your implementation>\n``` tags.\n\n@@ Important Notes\n- Do not add unnecessary optimizations.\n- Do not modify the method signature.\n- Maintain the original variable names and overall coding style wherever possible."
    ],
    "patches": [
      "public double getSumSquaredErrors() {\n    if (sumXX == 0) {\n        return Double.NaN;\n    }\n    return sumYY - sumXY * sumXY / sumXX;\n}",
      "public double getSumSquaredErrors() {\n    double tolerance = 1e-12;\n    if (Math.abs(sumXX) < tolerance) {\n        return Double.NaN;\n    }\n    return sumYY - sumXY * sumXY / sumXX;\n}",
      "public double getSumSquaredErrors() {\n    double sse = sumYY - sumXY * sumXY / sumXX;\n    return sse < 0 ? 0 : sse;\n}"
    ]
  }
}
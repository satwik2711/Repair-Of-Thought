{
  "Gson-15": {
    "prompt": [
      "You are a Senior Level Programmer with expertise in debugging and code repair. Your task is to review the provided function and produce a corrected, function-level implementation that fully addresses the identified bug.\n\n@@ Context\n// Provide a fix for the buggy function.\nRoot cause: The root cause of the bug is that the function `value(double value)` does not handle non-finite double values correctly, even when the writer is in lenient mode. The function throws an `IllegalArgumentException` when it encounters a non-finite value, instead of writing it to the output as expected.\nSuggestion: Ignore Non-Finite Values in Lenient Mode\nIn this solution, we can modify the `value(double value)` function to ignore non-finite values when the writer is in lenient mode. We can add a check for the lenient mode and return immediately if the value is non-finite. This solution is simple and efficient but may not be suitable if the application requires non-finite values to be written to the output.\n\n```java\npublic JsonWriter value(double value) throws IOException {\n  writeDeferredName();\n  if (Double.isNaN(value) || Double.isInfinite(value)) {\n    if (lenient) {\n      return this;\n    } else {\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n  }\n  beforeValue();\n  out.append(Double.toString(value));\n  return this;\n}\n```\n// Buggy Function\npublic JsonWriter value(double value) throws IOException {\n  writeDeferredName();\n  if (Double.isNaN(value) || Double.isInfinite(value)) {\n    throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n  }\n  beforeValue();\n  out.append(Double.toString(value));\n  return this;\n}\n// Fixed Function\n\n@@ Instructions\n1. Carefully analyze the provided root cause and fix suggestion.\n2. Ensure your implementation completely resolves the identified issue.\n3. Maintain the original method signature.\n4. Preserve the original functionality and coding style as much as possible.\n5. Incorporate all working parts of the original implementation.\n6. Follow the provided fix suggestion without over-engineering or introducing unnecessary changes.\n\n@@ Response Format\nReturn ONLY the complete fixed function wrapped in ```java\n<your implementation>\n``` tags.\n\n@@ Important Notes\n- Do not add unnecessary optimizations.\n- Do not modify the method signature.\n- Maintain the original variable names and overall coding style wherever possible.",
      "You are a Senior Level Programmer with expertise in debugging and code repair. Your task is to review the provided function and produce a corrected, function-level implementation that fully addresses the identified bug.\n\n@@ Context\n// Provide a fix for the buggy function.\nRoot cause: The root cause of the bug is that the function `value(double value)` does not handle non-finite double values correctly, even when the writer is in lenient mode. The function throws an `IllegalArgumentException` when it encounters a non-finite value, instead of writing it to the output as expected.\nSuggestion: Write Non-Finite Values as Strings\nIn this solution, we can modify the `value(double value)` function to write non-finite values as strings when the writer is in lenient mode. We can use the `Double.toString()` method to convert the non-finite value to a string and write it to the output. This solution is more suitable if the application requires non-finite values to be written to the output.\n\n```java\npublic JsonWriter value(double value) throws IOException {\n  writeDeferredName();\n  if (Double.isNaN(value) || Double.isInfinite(value)) {\n    if (lenient) {\n      out.append(Double.toString(value));\n    } else {\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n  } else {\n    beforeValue();\n    out.append(Double.toString(value));\n  }\n  return this;\n}\n```\n// Buggy Function\npublic JsonWriter value(double value) throws IOException {\n  writeDeferredName();\n  if (Double.isNaN(value) || Double.isInfinite(value)) {\n    throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n  }\n  beforeValue();\n  out.append(Double.toString(value));\n  return this;\n}\n// Fixed Function\n\n@@ Instructions\n1. Carefully analyze the provided root cause and fix suggestion.\n2. Ensure your implementation completely resolves the identified issue.\n3. Maintain the original method signature.\n4. Preserve the original functionality and coding style as much as possible.\n5. Incorporate all working parts of the original implementation.\n6. Follow the provided fix suggestion without over-engineering or introducing unnecessary changes.\n\n@@ Response Format\nReturn ONLY the complete fixed function wrapped in ```java\n<your implementation>\n``` tags.\n\n@@ Important Notes\n- Do not add unnecessary optimizations.\n- Do not modify the method signature.\n- Maintain the original variable names and overall coding style wherever possible.",
      "You are a Senior Level Programmer with expertise in debugging and code repair. Your task is to review the provided function and produce a corrected, function-level implementation that fully addresses the identified bug.\n\n@@ Context\n// Provide a fix for the buggy function.\nRoot cause: The root cause of the bug is that the function `value(double value)` does not handle non-finite double values correctly, even when the writer is in lenient mode. The function throws an `IllegalArgumentException` when it encounters a non-finite value, instead of writing it to the output as expected.\nSuggestion: Use a Different Representation for Non-Finite Values\nIn this solution, we can modify the `value(double value)` function to use a different representation for non-finite values when the writer is in lenient mode. For example, we can use the strings 'NaN' and 'Infinity' to represent non-finite values. This solution is more suitable if the application requires a specific representation for non-finite values.\n\n```java\npublic JsonWriter value(double value) throws IOException {\n  writeDeferredName();\n  if (Double.isNaN(value)) {\n    if (lenient) {\n      out.append(\"NaN\");\n    } else {\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n  } else if (Double.isInfinite(value)) {\n    if (lenient) {\n      out.append(value < 0 ? \"-Infinity\" : \"Infinity\");\n    } else {\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n  } else {\n    beforeValue();\n    out.append(Double.toString(value));\n  }\n  return this;\n}\n```\n// Buggy Function\npublic JsonWriter value(double value) throws IOException {\n  writeDeferredName();\n  if (Double.isNaN(value) || Double.isInfinite(value)) {\n    throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n  }\n  beforeValue();\n  out.append(Double.toString(value));\n  return this;\n}\n// Fixed Function\n\n@@ Instructions\n1. Carefully analyze the provided root cause and fix suggestion.\n2. Ensure your implementation completely resolves the identified issue.\n3. Maintain the original method signature.\n4. Preserve the original functionality and coding style as much as possible.\n5. Incorporate all working parts of the original implementation.\n6. Follow the provided fix suggestion without over-engineering or introducing unnecessary changes.\n\n@@ Response Format\nReturn ONLY the complete fixed function wrapped in ```java\n<your implementation>\n``` tags.\n\n@@ Important Notes\n- Do not add unnecessary optimizations.\n- Do not modify the method signature.\n- Maintain the original variable names and overall coding style wherever possible."
    ],
    "patches": [
      "public JsonWriter value(double value) throws IOException {\n  writeDeferredName();\n  if (Double.isNaN(value) || Double.isInfinite(value)) {\n    if (lenient) {\n      return this;\n    } else {\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n  }\n  beforeValue();\n  out.append(Double.toString(value));\n  return this;\n}",
      "public JsonWriter value(double value) throws IOException {\n  writeDeferredName();\n  if (Double.isNaN(value) || Double.isInfinite(value)) {\n    if (lenient) {\n      out.append(Double.toString(value));\n    } else {\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n  } else {\n    beforeValue();\n    out.append(Double.toString(value));\n  }\n  return this;\n}",
      "public JsonWriter value(double value) throws IOException {\n  writeDeferredName();\n  if (Double.isNaN(value)) {\n    if (lenient) {\n      out.append(\"NaN\");\n    } else {\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n  } else if (Double.isInfinite(value)) {\n    if (lenient) {\n      out.append(value < 0 ? \"-Infinity\" : \"Infinity\");\n    } else {\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n  } else {\n    beforeValue();\n    out.append(Double.toString(value));\n  }\n  return this;\n}"
    ]
  }
}
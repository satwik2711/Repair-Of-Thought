{
  "Math-102": {
    "prompt": [
      "You are a Senior Level Programmer with expertise in debugging and code repair. Your task is to review the provided function and produce a corrected, function-level implementation that fully addresses the identified bug.\n\n@@ Context\n// Provide a fix for the buggy function.\nRoot cause: The chiSquare function is not correctly rescaling the expected array to ensure that the sum of the expected and observed counts are equal. This is causing the calculated chi-square test statistic to be incorrect.\nSuggestion: Rescale Expected Array\nWe can rescale the expected array by dividing each element by the sum of the expected array and multiplying by the sum of the observed array. This will ensure that the sum of the expected and observed counts are equal. Here is the modified code:\n\n```java\ndouble sumObserved = 0.0d;\nfor (int i = 0; i < observed.length; i++) {\n    sumObserved += observed[i];\n}\ndouble sumExpected = 0.0d;\nfor (int i = 0; i < expected.length; i++) {\n    sumExpected += expected[i];\n}\ndouble[] rescaledExpected = new double[expected.length];\nfor (int i = 0; i < expected.length; i++) {\n    rescaledExpected[i] = expected[i] * sumObserved / sumExpected;\n}\ndouble sumSq = 0.0d;\ndouble dev = 0.0d;\nfor (int i = 0; i < observed.length; i++) {\n    dev = ((double) observed[i] - rescaledExpected[i]);\n    sumSq += dev * dev / rescaledExpected[i];\n}\nreturn sumSq;\n```\n// Buggy Function\npublic double chiSquare(double[] expected, long[] observed)\n    throws IllegalArgumentException {\n    if ((expected.length < 2) || (expected.length != observed.length)) {\n        throw new IllegalArgumentException(\n                \"observed, expected array lengths incorrect\");\n    }\n    if (!isPositive(expected) || !isNonNegative(observed)) {\n        throw new IllegalArgumentException(\n            \"observed counts must be non-negative and expected counts must be postive\");\n    }\n    double sumSq = 0.0d;\n    double dev = 0.0d;\n    for (int i = 0; i < observed.length; i++) {\n            dev = ((double) observed[i] - expected[i]);\n            sumSq += dev * dev / expected[i];\n    }\n    return sumSq;\n}\n// Fixed Function\n\n@@ Instructions\n1. Carefully analyze the provided root cause and fix suggestion.\n2. Ensure your implementation completely resolves the identified issue.\n3. Maintain the original method signature.\n4. Preserve the original functionality and coding style as much as possible.\n5. Incorporate all working parts of the original implementation.\n6. Follow the provided fix suggestion without over-engineering or introducing unnecessary changes.\n\n@@ Response Format\nReturn ONLY the complete fixed function wrapped in ```java\n<your implementation>\n``` tags.\n\n@@ Important Notes\n- Do not add unnecessary optimizations.\n- Do not modify the method signature.\n- Maintain the original variable names and overall coding style wherever possible.",
      "You are a Senior Level Programmer with expertise in debugging and code repair. Your task is to review the provided function and produce a corrected, function-level implementation that fully addresses the identified bug.\n\n@@ Context\n// Provide a fix for the buggy function.\nRoot cause: The chiSquare function is not correctly rescaling the expected array to ensure that the sum of the expected and observed counts are equal. This is causing the calculated chi-square test statistic to be incorrect.\nSuggestion: Use a Different Calculation Method\nInstead of using the formula sum((obs - exp)^2/exp), we can use the formula sum((obs - exp)^2/(exp + obs)) to calculate the chi-square test statistic. This method is more robust and can handle cases where the expected counts are zero. Here is the modified code:\n\n```java\ndouble sumSq = 0.0d;\ndouble dev = 0.0d;\nfor (int i = 0; i < observed.length; i++) {\n    dev = ((double) observed[i] - expected[i]);\n    sumSq += dev * dev / (expected[i] + observed[i]);\n}\nreturn sumSq;\n```\n// Buggy Function\npublic double chiSquare(double[] expected, long[] observed)\n    throws IllegalArgumentException {\n    if ((expected.length < 2) || (expected.length != observed.length)) {\n        throw new IllegalArgumentException(\n                \"observed, expected array lengths incorrect\");\n    }\n    if (!isPositive(expected) || !isNonNegative(observed)) {\n        throw new IllegalArgumentException(\n            \"observed counts must be non-negative and expected counts must be postive\");\n    }\n    double sumSq = 0.0d;\n    double dev = 0.0d;\n    for (int i = 0; i < observed.length; i++) {\n            dev = ((double) observed[i] - expected[i]);\n            sumSq += dev * dev / expected[i];\n    }\n    return sumSq;\n}\n// Fixed Function\n\n@@ Instructions\n1. Carefully analyze the provided root cause and fix suggestion.\n2. Ensure your implementation completely resolves the identified issue.\n3. Maintain the original method signature.\n4. Preserve the original functionality and coding style as much as possible.\n5. Incorporate all working parts of the original implementation.\n6. Follow the provided fix suggestion without over-engineering or introducing unnecessary changes.\n\n@@ Response Format\nReturn ONLY the complete fixed function wrapped in ```java\n<your implementation>\n``` tags.\n\n@@ Important Notes\n- Do not add unnecessary optimizations.\n- Do not modify the method signature.\n- Maintain the original variable names and overall coding style wherever possible.",
      "You are a Senior Level Programmer with expertise in debugging and code repair. Your task is to review the provided function and produce a corrected, function-level implementation that fully addresses the identified bug.\n\n@@ Context\n// Provide a fix for the buggy function.\nRoot cause: The chiSquare function is not correctly rescaling the expected array to ensure that the sum of the expected and observed counts are equal. This is causing the calculated chi-square test statistic to be incorrect.\nSuggestion: Check for Zero Expected Counts\nWe can add a check to ensure that the expected counts are not zero before calculating the chi-square test statistic. If any expected count is zero, we can throw an IllegalArgumentException. Here is the modified code:\n\n```java\nfor (int i = 0; i < expected.length; i++) {\n    if (expected[i] == 0) {\n        throw new IllegalArgumentException(\"Expected count cannot be zero\");\n    }\n}\ndouble sumSq = 0.0d;\ndouble dev = 0.0d;\nfor (int i = 0; i < observed.length; i++) {\n    dev = ((double) observed[i] - expected[i]);\n    sumSq += dev * dev / expected[i];\n}\nreturn sumSq;\n```\n// Buggy Function\npublic double chiSquare(double[] expected, long[] observed)\n    throws IllegalArgumentException {\n    if ((expected.length < 2) || (expected.length != observed.length)) {\n        throw new IllegalArgumentException(\n                \"observed, expected array lengths incorrect\");\n    }\n    if (!isPositive(expected) || !isNonNegative(observed)) {\n        throw new IllegalArgumentException(\n            \"observed counts must be non-negative and expected counts must be postive\");\n    }\n    double sumSq = 0.0d;\n    double dev = 0.0d;\n    for (int i = 0; i < observed.length; i++) {\n            dev = ((double) observed[i] - expected[i]);\n            sumSq += dev * dev / expected[i];\n    }\n    return sumSq;\n}\n// Fixed Function\n\n@@ Instructions\n1. Carefully analyze the provided root cause and fix suggestion.\n2. Ensure your implementation completely resolves the identified issue.\n3. Maintain the original method signature.\n4. Preserve the original functionality and coding style as much as possible.\n5. Incorporate all working parts of the original implementation.\n6. Follow the provided fix suggestion without over-engineering or introducing unnecessary changes.\n\n@@ Response Format\nReturn ONLY the complete fixed function wrapped in ```java\n<your implementation>\n``` tags.\n\n@@ Important Notes\n- Do not add unnecessary optimizations.\n- Do not modify the method signature.\n- Maintain the original variable names and overall coding style wherever possible."
    ],
    "patches": [
      "public double chiSquare(double[] expected, long[] observed)\n    throws IllegalArgumentException {\n    if ((expected.length < 2) || (expected.length != observed.length)) {\n        throw new IllegalArgumentException(\n                \"observed, expected array lengths incorrect\");\n    }\n    if (!isPositive(expected) || !isNonNegative(observed)) {\n        throw new IllegalArgumentException(\n            \"observed counts must be non-negative and expected counts must be positive\");\n    }\n    \n    double sumObserved = 0.0d;\n    for (int i = 0; i < observed.length; i++) {\n        sumObserved += observed[i];\n    }\n    \n    double sumExpected = 0.0d;\n    for (int i = 0; i < expected.length; i++) {\n        sumExpected += expected[i];\n    }\n    \n    double[] rescaledExpected = new double[expected.length];\n    for (int i = 0; i < expected.length; i++) {\n        rescaledExpected[i] = expected[i] * sumObserved / sumExpected;\n    }\n    \n    double sumSq = 0.0d;\n    double dev = 0.0d;\n    for (int i = 0; i < observed.length; i++) {\n        dev = ((double) observed[i] - rescaledExpected[i]);\n        sumSq += dev * dev / rescaledExpected[i];\n    }\n    return sumSq;\n}",
      "public double chiSquare(double[] expected, long[] observed)\n    throws IllegalArgumentException {\n    if ((expected.length < 2) || (expected.length != observed.length)) {\n        throw new IllegalArgumentException(\n                \"observed, expected array lengths incorrect\");\n    }\n    if (!isPositive(expected) || !isNonNegative(observed)) {\n        throw new IllegalArgumentException(\n            \"observed counts must be non-negative and expected counts must be positive\");\n    }\n    double sumSq = 0.0d;\n    double dev = 0.0d;\n    for (int i = 0; i < observed.length; i++) {\n        dev = ((double) observed[i] - expected[i]);\n        sumSq += dev * dev / (expected[i] + observed[i]);\n    }\n    return sumSq;\n}",
      "public double chiSquare(double[] expected, long[] observed)\n    throws IllegalArgumentException {\n    if ((expected.length < 2) || (expected.length != observed.length)) {\n        throw new IllegalArgumentException(\n                \"observed, expected array lengths incorrect\");\n    }\n    if (!isPositive(expected) || !isNonNegative(observed)) {\n        throw new IllegalArgumentException(\n            \"observed counts must be non-negative and expected counts must be positive\");\n    }\n\n    long sumObserved = 0;\n    for (long count : observed) {\n        sumObserved += count;\n    }\n\n    double sumExpected = 0.0;\n    for (double exp : expected) {\n        sumExpected += exp;\n    }\n\n    double scalingFactor = (double) sumObserved / sumExpected;\n\n    double[] scaledExpected = new double[expected.length];\n    for (int i = 0; i < expected.length; i++) {\n        scaledExpected[i] = expected[i] * scalingFactor;\n    }\n\n    for (double exp : scaledExpected) {\n        if (exp == 0) {\n            throw new IllegalArgumentException(\"Scaled expected count cannot be zero.\");\n        }\n    }\n\n    double sumSq = 0.0d;\n    for (int i = 0; i < observed.length; i++) {\n        double dev = (double) observed[i] - scaledExpected[i];\n        sumSq += dev * dev / scaledExpected[i];\n    }\n\n    return sumSq;\n}"
    ]
  }
}
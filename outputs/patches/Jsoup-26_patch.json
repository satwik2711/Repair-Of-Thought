{
  "Jsoup-26": {
    "prompt": [
      "You are a Senior Level Programmer with expertise in debugging and code repair. Your task is to review the provided function and produce a corrected, function-level implementation that fully addresses the identified bug.\n\n@@ Context\n// Provide a fix for the buggy function.\nRoot cause: The root cause of the bug is that the `copySafeNodes` method is trying to access the `childNodes` of the `body` element of the `dirtyDocument`, but the `body` element is null. This is because the `dirtyDocument` contains a `frameset` element, which does not have a `body` element. The `copySafeNodes` method is not handling this case correctly.\nSuggestion: Check for Frameset Element\nCheck if the `dirtyDocument` contains a `frameset` element before trying to access its `body` element. If it does, return an empty document. This can be achieved by adding a simple null check for the `body` element before calling the `copySafeNodes` method.\n\n```java\npublic Document clean(Document dirtyDocument) {\n    Validate.notNull(dirtyDocument);\n\n    if (dirtyDocument.body() == null) {\n        return Document.createShell(dirtyDocument.baseUri());\n    }\n\n    Document clean = Document.createShell(dirtyDocument.baseUri());\n    copySafeNodes(dirtyDocument.body(), clean.body());\n\n    return clean;\n}\n```\n// Buggy Function\npublic Document clean(Document dirtyDocument) {\n    Validate.notNull(dirtyDocument);\n\n    Document clean = Document.createShell(dirtyDocument.baseUri());\n        copySafeNodes(dirtyDocument.body(), clean.body());\n\n    return clean;\n}\n// Fixed Function\n\n@@ Instructions\n1. Carefully analyze the provided root cause and fix suggestion.\n2. Ensure your implementation completely resolves the identified issue.\n3. Maintain the original method signature.\n4. Preserve the original functionality and coding style as much as possible.\n5. Incorporate all working parts of the original implementation.\n6. Follow the provided fix suggestion without over-engineering or introducing unnecessary changes.\n\n@@ Response Format\nReturn ONLY the complete fixed function wrapped in ```java\n<your implementation>\n``` tags.\n\n@@ Important Notes\n- Do not add unnecessary optimizations.\n- Do not modify the method signature.\n- Maintain the original variable names and overall coding style wherever possible.",
      "You are a Senior Level Programmer with expertise in debugging and code repair. Your task is to review the provided function and produce a corrected, function-level implementation that fully addresses the identified bug.\n\n@@ Context\n// Provide a fix for the buggy function.\nRoot cause: The root cause of the bug is that the `copySafeNodes` method is trying to access the `childNodes` of the `body` element of the `dirtyDocument`, but the `body` element is null. This is because the `dirtyDocument` contains a `frameset` element, which does not have a `body` element. The `copySafeNodes` method is not handling this case correctly.\nSuggestion: Handle Frameset Element\nModify the `copySafeNodes` method to handle the case where the `source` element is a `frameset` element. This could involve recursively calling the method on the `frameset` element's children. However, this approach may require significant changes to the `copySafeNodes` method and may not be feasible without modifying other parts of the code.\n\n```java\nprivate void copySafeNodes(Node source, Node dest) {\n    if (source instanceof FrameSet) {\n        for (Node child : source.childNodes()) {\n            copySafeNodes(child, dest);\n        }\n    } else {\n        // existing implementation\n    }\n}\n```\n// Buggy Function\npublic Document clean(Document dirtyDocument) {\n    Validate.notNull(dirtyDocument);\n\n    Document clean = Document.createShell(dirtyDocument.baseUri());\n        copySafeNodes(dirtyDocument.body(), clean.body());\n\n    return clean;\n}\n// Fixed Function\n\n@@ Instructions\n1. Carefully analyze the provided root cause and fix suggestion.\n2. Ensure your implementation completely resolves the identified issue.\n3. Maintain the original method signature.\n4. Preserve the original functionality and coding style as much as possible.\n5. Incorporate all working parts of the original implementation.\n6. Follow the provided fix suggestion without over-engineering or introducing unnecessary changes.\n\n@@ Response Format\nReturn ONLY the complete fixed function wrapped in ```java\n<your implementation>\n``` tags.\n\n@@ Important Notes\n- Do not add unnecessary optimizations.\n- Do not modify the method signature.\n- Maintain the original variable names and overall coding style wherever possible.",
      "You are a Senior Level Programmer with expertise in debugging and code repair. Your task is to review the provided function and produce a corrected, function-level implementation that fully addresses the identified bug.\n\n@@ Context\n// Provide a fix for the buggy function.\nRoot cause: The root cause of the bug is that the `copySafeNodes` method is trying to access the `childNodes` of the `body` element of the `dirtyDocument`, but the `body` element is null. This is because the `dirtyDocument` contains a `frameset` element, which does not have a `body` element. The `copySafeNodes` method is not handling this case correctly.\nSuggestion: Return an Empty Document with a Frameset Element\nIf the `dirtyDocument` contains a `frameset` element, return an empty document with a `frameset` element instead of throwing an exception. This would ensure that the function returns a valid document, even if it's empty.\n\n```java\npublic Document clean(Document dirtyDocument) {\n    Validate.notNull(dirtyDocument);\n\n    if (dirtyDocument.body() == null) {\n        Document clean = Document.createShell(dirtyDocument.baseUri());\n        clean.body().appendChild(new FrameSet());\n        return clean;\n    }\n\n    Document clean = Document.createShell(dirtyDocument.baseUri());\n    copySafeNodes(dirtyDocument.body(), clean.body());\n\n    return clean;\n}\n```\n// Buggy Function\npublic Document clean(Document dirtyDocument) {\n    Validate.notNull(dirtyDocument);\n\n    Document clean = Document.createShell(dirtyDocument.baseUri());\n        copySafeNodes(dirtyDocument.body(), clean.body());\n\n    return clean;\n}\n// Fixed Function\n\n@@ Instructions\n1. Carefully analyze the provided root cause and fix suggestion.\n2. Ensure your implementation completely resolves the identified issue.\n3. Maintain the original method signature.\n4. Preserve the original functionality and coding style as much as possible.\n5. Incorporate all working parts of the original implementation.\n6. Follow the provided fix suggestion without over-engineering or introducing unnecessary changes.\n\n@@ Response Format\nReturn ONLY the complete fixed function wrapped in ```java\n<your implementation>\n``` tags.\n\n@@ Important Notes\n- Do not add unnecessary optimizations.\n- Do not modify the method signature.\n- Maintain the original variable names and overall coding style wherever possible."
    ],
    "patches": [
      "public Document clean(Document dirtyDocument) {\n    Validate.notNull(dirtyDocument);\n\n    if (dirtyDocument.body() == null) {\n        return Document.createShell(dirtyDocument.baseUri());\n    }\n\n    Document clean = Document.createShell(dirtyDocument.baseUri());\n    copySafeNodes(dirtyDocument.body(), clean.body());\n\n    return clean;\n}",
      "public Document clean(Document dirtyDocument) {\n    Validate.notNull(dirtyDocument);\n\n    Document clean = Document.createShell(dirtyDocument.baseUri());\n    \n    Element sourceBody = dirtyDocument.body();\n    if (sourceBody != null) {\n        copySafeNodes(sourceBody, clean.body());\n    } else {\n        // Look for frameset in the dirty document\n        Element frameset = null;\n        for (Node node : dirtyDocument.childNodes()) {\n            if (node instanceof Element && ((Element) node).tagName().equalsIgnoreCase(\"frameset\")) {\n                frameset = (Element) node;\n                break;\n            }\n        }\n        if (frameset != null) {\n            // Create a frameset in the clean document and replace the default body\n            Element cleanFrameset = clean.createElement(\"frameset\");\n            clean.html().removeChild(clean.body());\n            clean.html().appendChild(cleanFrameset);\n            copySafeNodes(frameset, cleanFrameset);\n        }\n    }\n\n    return clean;\n}",
      "public Document clean(Document dirtyDocument) {\n    Validate.notNull(dirtyDocument);\n\n    if (dirtyDocument.body() == null) {\n        Document clean = Document.createShell(dirtyDocument.baseUri());\n        clean.body().appendChild(new FrameSet());\n        return clean;\n    }\n\n    Document clean = Document.createShell(dirtyDocument.baseUri());\n    copySafeNodes(dirtyDocument.body(), clean.body());\n\n    return clean;\n}"
    ]
  }
}
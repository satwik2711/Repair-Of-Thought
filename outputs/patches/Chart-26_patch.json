{
  "Chart-26": {
    "prompt": [
      "// Provide a fix for the buggy function.\nRoot cause: The root cause of the bug is not directly related to the 'drawLabel' method, but rather to the 'draw' method of the chart, which is not shown in the provided code. However, based on the error message and the trigger test, it can be inferred that the issue is related to the handling of null 'info' arguments in the 'draw' method. The 'drawLabel' method is likely called by the 'draw' method, and it throws an exception when the 'plotState' argument is null. This exception is not caught or handled properly in the 'draw' method, leading to the AssertionError in the trigger test.\nSuggestion: Add Null Check for plotState\nWe can add a null check for the 'plotState' argument at the beginning of the 'drawLabel' method. If the 'plotState' argument is null, we can either return immediately or throw a custom exception with a meaningful error message. This will prevent the NullPointerException and provide a clear error message to the user.\n\n```java\nprotected AxisState drawLabel(String label, Graphics2D g2, \n        Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, \n        AxisState state, PlotRenderingInfo plotState) {\n\n    if (plotState == null) {\n        // Handle null plotState argument\n        // For example, return a default value or throw a custom exception\n        return state;\n    }\n\n    // ...\n}\n```\n// Buggy Function\nprotected AxisState drawLabel(String label, Graphics2D g2, \n        Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, \n        AxisState state, PlotRenderingInfo plotState) {\n\n    // it is unlikely that 'state' will be null, but check anyway...\n    if (state == null) {\n        throw new IllegalArgumentException(\"Null 'state' argument.\");\n    }\n    \n    if ((label == null) || (label.equals(\"\"))) {\n        return state;\n    }\n\n    Font font = getLabelFont();\n    RectangleInsets insets = getLabelInsets();\n    g2.setFont(font);\n    g2.setPaint(getLabelPaint());\n    FontMetrics fm = g2.getFontMetrics();\n    Rectangle2D labelBounds = TextUtilities.getTextBounds(label, g2, fm);\n    Shape hotspot = null;\n    \n    if (edge == RectangleEdge.TOP) {\n        AffineTransform t = AffineTransform.getRotateInstance(\n                getLabelAngle(), labelBounds.getCenterX(), \n                labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        float w = (float) labelBounds.getWidth();\n        float h = (float) labelBounds.getHeight();\n        float labelx = (float) dataArea.getCenterX();\n        float labely = (float) (state.getCursor() - insets.getBottom() \n                - h / 2.0);\n        TextUtilities.drawRotatedString(label, g2, labelx, labely, \n                TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n                labely - h / 2.0f, w, h);\n        state.cursorUp(insets.getTop() + labelBounds.getHeight() \n                + insets.getBottom());\n    }\n    else if (edge == RectangleEdge.BOTTOM) {\n        AffineTransform t = AffineTransform.getRotateInstance(\n                getLabelAngle(), labelBounds.getCenterX(), \n                labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        float w = (float) labelBounds.getWidth();\n        float h = (float) labelBounds.getHeight();\n        float labelx = (float) dataArea.getCenterX();\n        float labely = (float) (state.getCursor() + insets.getTop() \n                + h / 2.0);\n        TextUtilities.drawRotatedString(label, g2, labelx, labely, \n                TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n                labely - h / 2.0f, w, h);\n        state.cursorDown(insets.getTop() + labelBounds.getHeight() \n                + insets.getBottom());\n    }\n    else if (edge == RectangleEdge.LEFT) {\n        AffineTransform t = AffineTransform.getRotateInstance(\n                getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(), \n                labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        float w = (float) labelBounds.getWidth();\n        float h = (float) labelBounds.getHeight();\n        float labelx = (float) (state.getCursor() - insets.getRight() \n                - w / 2.0);\n        float labely = (float) dataArea.getCenterY();\n        TextUtilities.drawRotatedString(label, g2, labelx, labely, \n                TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, \n                TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n                labely - h / 2.0f, w, h);\n        state.cursorLeft(insets.getLeft() + labelBounds.getWidth() \n                + insets.getRight());\n    }\n    else if (edge == RectangleEdge.RIGHT) {\n\n        AffineTransform t = AffineTransform.getRotateInstance(\n                getLabelAngle() + Math.PI / 2.0, \n                labelBounds.getCenterX(), labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        float w = (float) labelBounds.getWidth();\n        float h = (float) labelBounds.getHeight();\n        float labelx = (float) (state.getCursor() \n                        + insets.getLeft() + w / 2.0);\n        float labely = (float) (dataArea.getY() + dataArea.getHeight() \n                / 2.0);\n        TextUtilities.drawRotatedString(label, g2, labelx, labely, \n                TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, \n                TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n                labely - h / 2.0f, w, h);\n        state.cursorRight(insets.getLeft() + labelBounds.getWidth() \n                + insets.getRight());\n\n    }\n    if (plotState != null && hotspot != null) {\n        ChartRenderingInfo owner = plotState.getOwner();\n            EntityCollection entities = owner.getEntityCollection();\n            if (entities != null) {\n                entities.add(new AxisLabelEntity(this, hotspot, \n                        this.labelToolTip, this.labelURL));\n            }\n    }\n    return state;\n\n}\n// Fixed Function",
      "// Provide a fix for the buggy function.\nRoot cause: The root cause of the bug is not directly related to the 'drawLabel' method, but rather to the 'draw' method of the chart, which is not shown in the provided code. However, based on the error message and the trigger test, it can be inferred that the issue is related to the handling of null 'info' arguments in the 'draw' method. The 'drawLabel' method is likely called by the 'draw' method, and it throws an exception when the 'plotState' argument is null. This exception is not caught or handled properly in the 'draw' method, leading to the AssertionError in the trigger test.\nSuggestion: Handle plotState Null in draw Method\nAlternatively, we can handle the null 'plotState' argument in the 'draw' method of the chart. We can add a null check for the 'info' argument and handle it properly. This will prevent the exception from being thrown in the 'drawLabel' method and provide a clear error message to the user.\n\n```java\npublic void draw(Graphics2D g2, Rectangle2D area, \n        Point2D anchor, PlotState parentState, PlotRenderingInfo info) {\n\n    if (info == null) {\n        // Handle null info argument\n        // For example, return a default value or throw a custom exception\n        return;\n    }\n\n    // ...\n}\n```\n// Buggy Function\nprotected AxisState drawLabel(String label, Graphics2D g2, \n        Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, \n        AxisState state, PlotRenderingInfo plotState) {\n\n    // it is unlikely that 'state' will be null, but check anyway...\n    if (state == null) {\n        throw new IllegalArgumentException(\"Null 'state' argument.\");\n    }\n    \n    if ((label == null) || (label.equals(\"\"))) {\n        return state;\n    }\n\n    Font font = getLabelFont();\n    RectangleInsets insets = getLabelInsets();\n    g2.setFont(font);\n    g2.setPaint(getLabelPaint());\n    FontMetrics fm = g2.getFontMetrics();\n    Rectangle2D labelBounds = TextUtilities.getTextBounds(label, g2, fm);\n    Shape hotspot = null;\n    \n    if (edge == RectangleEdge.TOP) {\n        AffineTransform t = AffineTransform.getRotateInstance(\n                getLabelAngle(), labelBounds.getCenterX(), \n                labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        float w = (float) labelBounds.getWidth();\n        float h = (float) labelBounds.getHeight();\n        float labelx = (float) dataArea.getCenterX();\n        float labely = (float) (state.getCursor() - insets.getBottom() \n                - h / 2.0);\n        TextUtilities.drawRotatedString(label, g2, labelx, labely, \n                TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n                labely - h / 2.0f, w, h);\n        state.cursorUp(insets.getTop() + labelBounds.getHeight() \n                + insets.getBottom());\n    }\n    else if (edge == RectangleEdge.BOTTOM) {\n        AffineTransform t = AffineTransform.getRotateInstance(\n                getLabelAngle(), labelBounds.getCenterX(), \n                labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        float w = (float) labelBounds.getWidth();\n        float h = (float) labelBounds.getHeight();\n        float labelx = (float) dataArea.getCenterX();\n        float labely = (float) (state.getCursor() + insets.getTop() \n                + h / 2.0);\n        TextUtilities.drawRotatedString(label, g2, labelx, labely, \n                TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n                labely - h / 2.0f, w, h);\n        state.cursorDown(insets.getTop() + labelBounds.getHeight() \n                + insets.getBottom());\n    }\n    else if (edge == RectangleEdge.LEFT) {\n        AffineTransform t = AffineTransform.getRotateInstance(\n                getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(), \n                labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        float w = (float) labelBounds.getWidth();\n        float h = (float) labelBounds.getHeight();\n        float labelx = (float) (state.getCursor() - insets.getRight() \n                - w / 2.0);\n        float labely = (float) dataArea.getCenterY();\n        TextUtilities.drawRotatedString(label, g2, labelx, labely, \n                TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, \n                TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n                labely - h / 2.0f, w, h);\n        state.cursorLeft(insets.getLeft() + labelBounds.getWidth() \n                + insets.getRight());\n    }\n    else if (edge == RectangleEdge.RIGHT) {\n\n        AffineTransform t = AffineTransform.getRotateInstance(\n                getLabelAngle() + Math.PI / 2.0, \n                labelBounds.getCenterX(), labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        float w = (float) labelBounds.getWidth();\n        float h = (float) labelBounds.getHeight();\n        float labelx = (float) (state.getCursor() \n                        + insets.getLeft() + w / 2.0);\n        float labely = (float) (dataArea.getY() + dataArea.getHeight() \n                / 2.0);\n        TextUtilities.drawRotatedString(label, g2, labelx, labely, \n                TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, \n                TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n                labely - h / 2.0f, w, h);\n        state.cursorRight(insets.getLeft() + labelBounds.getWidth() \n                + insets.getRight());\n\n    }\n    if (plotState != null && hotspot != null) {\n        ChartRenderingInfo owner = plotState.getOwner();\n            EntityCollection entities = owner.getEntityCollection();\n            if (entities != null) {\n                entities.add(new AxisLabelEntity(this, hotspot, \n                        this.labelToolTip, this.labelURL));\n            }\n    }\n    return state;\n\n}\n// Fixed Function",
      "// Provide a fix for the buggy function.\nRoot cause: The root cause of the bug is not directly related to the 'drawLabel' method, but rather to the 'draw' method of the chart, which is not shown in the provided code. However, based on the error message and the trigger test, it can be inferred that the issue is related to the handling of null 'info' arguments in the 'draw' method. The 'drawLabel' method is likely called by the 'draw' method, and it throws an exception when the 'plotState' argument is null. This exception is not caught or handled properly in the 'draw' method, leading to the AssertionError in the trigger test.\nSuggestion: Modify drawLabel Method to Handle Null plotState\nWe can modify the 'drawLabel' method to handle the null 'plotState' argument. We can add a null check for the 'plotState' argument and handle it properly. For example, we can return a default value or throw a custom exception with a meaningful error message. This will prevent the NullPointerException and provide a clear error message to the user.\n\n```java\nprotected AxisState drawLabel(String label, Graphics2D g2, \n        Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, \n        AxisState state, PlotRenderingInfo plotState) {\n\n    if (plotState == null) {\n        // Handle null plotState argument\n        // For example, return a default value or throw a custom exception\n        throw new NullPointerException(\"plotState is null\");\n    }\n\n    // ...\n}\n```\n// Buggy Function\nprotected AxisState drawLabel(String label, Graphics2D g2, \n        Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, \n        AxisState state, PlotRenderingInfo plotState) {\n\n    // it is unlikely that 'state' will be null, but check anyway...\n    if (state == null) {\n        throw new IllegalArgumentException(\"Null 'state' argument.\");\n    }\n    \n    if ((label == null) || (label.equals(\"\"))) {\n        return state;\n    }\n\n    Font font = getLabelFont();\n    RectangleInsets insets = getLabelInsets();\n    g2.setFont(font);\n    g2.setPaint(getLabelPaint());\n    FontMetrics fm = g2.getFontMetrics();\n    Rectangle2D labelBounds = TextUtilities.getTextBounds(label, g2, fm);\n    Shape hotspot = null;\n    \n    if (edge == RectangleEdge.TOP) {\n        AffineTransform t = AffineTransform.getRotateInstance(\n                getLabelAngle(), labelBounds.getCenterX(), \n                labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        float w = (float) labelBounds.getWidth();\n        float h = (float) labelBounds.getHeight();\n        float labelx = (float) dataArea.getCenterX();\n        float labely = (float) (state.getCursor() - insets.getBottom() \n                - h / 2.0);\n        TextUtilities.drawRotatedString(label, g2, labelx, labely, \n                TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n                labely - h / 2.0f, w, h);\n        state.cursorUp(insets.getTop() + labelBounds.getHeight() \n                + insets.getBottom());\n    }\n    else if (edge == RectangleEdge.BOTTOM) {\n        AffineTransform t = AffineTransform.getRotateInstance(\n                getLabelAngle(), labelBounds.getCenterX(), \n                labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        float w = (float) labelBounds.getWidth();\n        float h = (float) labelBounds.getHeight();\n        float labelx = (float) dataArea.getCenterX();\n        float labely = (float) (state.getCursor() + insets.getTop() \n                + h / 2.0);\n        TextUtilities.drawRotatedString(label, g2, labelx, labely, \n                TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n                labely - h / 2.0f, w, h);\n        state.cursorDown(insets.getTop() + labelBounds.getHeight() \n                + insets.getBottom());\n    }\n    else if (edge == RectangleEdge.LEFT) {\n        AffineTransform t = AffineTransform.getRotateInstance(\n                getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(), \n                labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        float w = (float) labelBounds.getWidth();\n        float h = (float) labelBounds.getHeight();\n        float labelx = (float) (state.getCursor() - insets.getRight() \n                - w / 2.0);\n        float labely = (float) dataArea.getCenterY();\n        TextUtilities.drawRotatedString(label, g2, labelx, labely, \n                TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, \n                TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n                labely - h / 2.0f, w, h);\n        state.cursorLeft(insets.getLeft() + labelBounds.getWidth() \n                + insets.getRight());\n    }\n    else if (edge == RectangleEdge.RIGHT) {\n\n        AffineTransform t = AffineTransform.getRotateInstance(\n                getLabelAngle() + Math.PI / 2.0, \n                labelBounds.getCenterX(), labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        float w = (float) labelBounds.getWidth();\n        float h = (float) labelBounds.getHeight();\n        float labelx = (float) (state.getCursor() \n                        + insets.getLeft() + w / 2.0);\n        float labely = (float) (dataArea.getY() + dataArea.getHeight() \n                / 2.0);\n        TextUtilities.drawRotatedString(label, g2, labelx, labely, \n                TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, \n                TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n                labely - h / 2.0f, w, h);\n        state.cursorRight(insets.getLeft() + labelBounds.getWidth() \n                + insets.getRight());\n\n    }\n    if (plotState != null && hotspot != null) {\n        ChartRenderingInfo owner = plotState.getOwner();\n            EntityCollection entities = owner.getEntityCollection();\n            if (entities != null) {\n                entities.add(new AxisLabelEntity(this, hotspot, \n                        this.labelToolTip, this.labelURL));\n            }\n    }\n    return state;\n\n}\n// Fixed Function"
    ],
    "patches": [
      "protected AxisState drawLabel(String label, Graphics2D g2, \n        Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, \n        AxisState state, PlotRenderingInfo plotState) {\n\n    // it is unlikely that 'state' will be null, but check anyway...\n    if (state == null) {\n        throw new IllegalArgumentException(\"Null 'state' argument.\");\n    }\n    \n    // Add null check for plotState\n    if (plotState == null) {\n        return state;\n    }\n\n    if ((label == null) || (label.equals(\"\"))) {\n        return state;\n    }\n\n    Font font = getLabelFont();\n    RectangleInsets insets = getLabelInsets();\n    g2.setFont(font);\n    g2.setPaint(getLabelPaint());\n    FontMetrics fm = g2.getFontMetrics();\n    Rectangle2D labelBounds = TextUtilities.getTextBounds(label, g2, fm);\n    Shape hotspot = null;\n    \n    if (edge == RectangleEdge.TOP) {\n        AffineTransform t = AffineTransform.getRotateInstance(\n                getLabelAngle(), labelBounds.getCenterX(), \n                labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        float w = (float) labelBounds.getWidth();\n        float h = (float) labelBounds.getHeight();\n        float labelx = (float) dataArea.getCenterX();\n        float labely = (float) (state.getCursor() - insets.getBottom() \n                - h / 2.0);\n        TextUtilities.drawRotatedString(label, g2, labelx, labely, \n                TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n                labely - h / 2.0f, w, h);\n        state.cursorUp(insets.getTop() + labelBounds.getHeight() \n                + insets.getBottom());\n    }\n    else if (edge == RectangleEdge.BOTTOM) {\n        AffineTransform t = AffineTransform.getRotateInstance(\n                getLabelAngle(), labelBounds.getCenterX(), \n                labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        float w = (float) labelBounds.getWidth();\n        float h = (float) labelBounds.getHeight();\n        float labelx = (float) dataArea.getCenterX();\n        float labely = (float) (state.getCursor() + insets.getTop() \n                + h / 2.0);\n        TextUtilities.drawRotatedString(label, g2, labelx, labely, \n                TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n                labely - h / 2.0f, w, h);\n        state.cursorDown(insets.getTop() + labelBounds.getHeight() \n                + insets.getBottom());\n    }\n    else if (edge == RectangleEdge.LEFT) {\n        AffineTransform t = AffineTransform.getRotateInstance(\n                getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(), \n                labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        float w = (float) labelBounds.getWidth();\n        float h = (float) labelBounds.getHeight();\n        float labelx = (float) (state.getCursor() - insets.getRight() \n                - w / 2.0);\n        float labely = (float) dataArea.getCenterY();\n        TextUtilities.drawRotatedString(label, g2, labelx, labely, \n                TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, \n                TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n                labely - h / 2.0f, w, h);\n        state.cursorLeft(insets.getLeft() + labelBounds.getWidth() \n                + insets.getRight());\n    }\n    else if (edge == RectangleEdge.RIGHT) {\n\n        AffineTransform t = AffineTransform.getRotateInstance(\n                getLabelAngle() + Math.PI / 2.0, \n                labelBounds.getCenterX(), labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        float w = (float) labelBounds.getWidth();\n        float h = (float) labelBounds.getHeight();\n        float labelx = (float) (state.getCursor() \n                        + insets.getLeft() + w / 2.0);\n        float labely = (float) (dataArea.getY() + dataArea.getHeight() \n                / 2.0);\n        TextUtilities.drawRotatedString(label, g2, labelx, labely, \n                TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, \n                TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n                labely - h / 2.0f, w, h);\n        state.cursorRight(insets.getLeft() + labelBounds.getWidth() \n                + insets.getRight());\n\n    }\n    if (plotState != null && hotspot != null) {\n        ChartRenderingInfo owner = plotState.getOwner();\n            EntityCollection entities = owner.getEntityCollection();\n            if (entities != null) {\n                entities.add(new AxisLabelEntity(this, hotspot, \n                        this.labelToolTip, this.labelURL));\n            }\n    }\n    return state;\n\n}",
      "<think>\nOkay, I need to fix the bug in the provided Java function. Let me start by understanding the problem.\n\nThe root cause is that the 'draw' method of the chart isn't handling a null 'info' argument properly. This causes an exception when 'drawLabel' is called because it expects a non-null 'plotState'. \n\nLooking at the 'drawLabel' method, it's called with 'plotState' as an argument. If 'plotState' is null, the code tries to use it without checking, leading to a NullPointerException when it calls 'plotState.getOwner()'.\n\nSo, the fix should handle the case where 'plotState' is null. I should add a null check before using 'plotState'. \n\nIn the original code, there's a condition: if (plotState != null && hotspot != null). That's good because it prevents using a null 'plotState'. However, maybe the problem is that 'plotState' is null, and the method isn't handling it elsewhere.\n\nWait, the user's suggestion was to handle the null 'info' in the 'draw' method, but since I'm fixing 'drawLabel', perhaps I should ensure that any null 'plotState' doesn't cause issues here.\n\nLooking at the 'drawLabel' function, the only place 'plotState' is used is in the last if statement. So, if 'plotState' is null, that block is skipped, which is correct. So why is there an exception?\n\nWait, maybe the exception is happening because 'plotState' is null, but the code isn't handling it in the 'draw' method, leading to an AssertionError. So perhaps the 'draw' method is passing a null 'info' to 'drawLabel', which then causes issues elsewhere.\n\nBut since I'm only to fix the 'drawLabel' method, perhaps I should make sure that it doesn't throw an exception when 'plotState' is null.\n\nWait, in the 'drawLabel' method, the only use of 'plotState' is in that last if block. So if 'plotState' is null, that block is skipped. So why is there an exception?\n\nWait, perhaps the 'draw' method is calling 'drawLabel' without checking if 'info' is null, and then 'drawLabel' is expecting 'plotState' to be non-null elsewhere. Or maybe the 'draw' method is passing a null 'info', which is then passed as 'plotState' to 'drawLabel', and 'drawLabel' uses it without checking.\n\nWait, looking at the function signature of 'drawLabel', the parameter is 'PlotRenderingInfo plotState'. So, in the 'draw' method, when it calls 'drawLabel', it passes 'info' as 'plotState'. If 'info' is null, then 'plotState' in 'drawLabel' is null.\n\nIn the 'drawLabel' method, the code after the if-else blocks has:\n\nif (plotState != null && hotspot != null) { ... }\n\nSo, if 'plotState' is null, this block is skipped. So that shouldn't cause a problem.\n\nWait, but maybe the 'draw' method is expecting 'drawLabel' to handle the null 'plotState' and not throw any exceptions. So perhaps the issue is that the 'draw' method isn't handling the null 'info' correctly, leading to an AssertionError.\n\nBut according to the user's instruction, I should fix the 'drawLabel' method. So perhaps I should make sure that 'drawLabel' doesn't throw any exceptions when 'plotState' is null.\n\nLooking at the 'drawLabel' method, the only place where 'plotState' is used is in that last if block. So if 'plotState' is null, that code is skipped. So why is there an exception?\n\nWait, perhaps the 'draw' method is calling 'drawLabel' and expecting it to handle the null 'plotState' without any issues, but the 'drawLabel' method is throwing an exception elsewhere.\n\nLooking again at 'drawLabel', the method starts by checking if 'state' is null and throws an exception. Then, if label is null or empty, returns state. Then proceeds to draw the label based on the edge.\n\nWait, perhaps when 'plotState' is null, but 'hotspot' is not null, the code inside the if block tries to access 'plotState.getOwner()', which would throw a NullPointerException. But in the code, the condition is 'if (plotState != null && hotspot != null)', so it should be safe.\n\nWait, no, the condition correctly checks if both are non-null before accessing. So that shouldn't be the issue.\n\nHmm, maybe the problem is elsewhere. Perhaps the 'draw' method is not handling the case where 'info' is null, leading to an AssertionError when the test expects it to handle it gracefully.\n\nSo, according to the user's suggestion, the fix is to handle the null 'info' in the 'draw' method. But since I'm to fix the 'drawLabel' method, perhaps I should make sure that it doesn't throw any exceptions when 'plotState' is null.\n\nWait, perhaps the 'drawLabel' method is being called with a null 'plotState', and the method is trying to use it in a way that causes an exception. But looking at the code, the only use is within the if block that checks for null.\n\nWait, perhaps the 'draw' method is passing a null 'info' to 'drawLabel', which is then passed as 'plotState'. Then, in 'drawLabel', when it tries to use 'plotState', it's null, but the code is supposed to handle it.\n\nWait, perhaps the issue is that the 'draw' method is not checking if 'info' is null before calling 'drawLabel', leading to an exception in 'drawLabel' when it tries to use 'plotState' elsewhere.\n\nBut in 'drawLabel', the only use of 'plotState' is in that if block, which is protected by a null check. So perhaps the problem is elsewhere.\n\nWait, perhaps the 'draw' method is expecting 'drawLabel' to return a valid state even when 'plotState' is null, but 'drawLabel' is throwing an exception.\n\nWait, looking at 'drawLabel', the method starts by checking if 'state' is null, which is a different parameter. So if 'state' is null, it throws an exception. But 'state' is a different parameter from 'plotState'.\n\nSo, perhaps in the 'draw' method, when 'info' is null, it's passing null as 'plotState' to 'drawLabel', but 'drawLabel' is expecting 'state' to be non-null. So if 'state' is null, it throws an exception.\n\nWait, but in the 'drawLabel' method, 'state' is an AxisState parameter. So perhaps in the 'draw' method, when 'info' is null, it's passing a null 'state' to 'drawLabel', which then throws the IllegalArgumentException.\n\nBut that doesn't make sense because 'state' is a different parameter. So perhaps the 'draw' method is passing a null 'state' when 'info' is null, causing 'drawLabel' to throw.\n\nAlternatively, perhaps the 'draw' method is not properly initializing 'state' when 'info' is null, leading to a null 'state' being passed to 'drawLabel'.\n\nBut according to the user's context, the root cause is in the 'draw' method's handling of null 'info', not in 'drawLabel'. So perhaps the fix should be in the 'draw' method, but since I'm to fix 'drawLabel', I need to see if there's anything I can do there.\n\nWait, perhaps the 'drawLabel' method should handle a null 'plotState' gracefully without relying on the 'draw' method. But in the current code, it's already doing that by checking if 'plotState' is null before using it.\n\nSo maybe the issue is that the 'draw' method is not handling the null 'info' correctly, leading to an AssertionError. Therefore, the fix should be in the 'draw' method, but the user is asking to fix 'drawLabel'.\n\nAlternatively, perhaps the 'drawLabel' method is being called without a null check on 'plotState' elsewhere, causing issues.\n\nWait, perhaps the problem is that when 'plotState' is null, the 'drawLabel' method doesn't update the 'state' parameter correctly, leading to incorrect cursor positions or other issues.\n\nBut looking at the code, the 'state' parameter is passed and modified (e.g., state.cursorUp(), etc.), which is separate from 'plotState'. So perhaps when 'plotState' is null, the 'drawLabel' method still correctly updates the 'state' parameter, which is good.\n\nSo, perhaps the issue is that the 'draw' method is not handling the null 'info' argument, leading to an exception when it calls 'drawLabel' and expects it to handle it.\n\nBut since I'm to fix 'drawLabel', perhaps I should make sure that it doesn't throw any exceptions when 'plotState' is null. But in the current code, it's already handling that.\n\nWait, perhaps the problem is that when 'plotState' is null, the 'drawLabel' method doesn't add any entities, but the 'draw' method expects it to, leading to an AssertionError.\n\nAlternatively, perhaps the 'draw' method is not properly handling the case where 'info' is null, leading to an exception that isn't caught, causing the test to fail with an AssertionError.\n\nBut according to the user's suggestion, the fix is to handle the null 'info' in the 'draw' method. So perhaps the 'drawLabel' method is correct, and the 'draw' method needs to be fixed. However, since the task is to fix 'drawLabel', I need to see if there's anything else I can do.\n\nWait, perhaps the 'drawLabel' method should not throw an exception when 'state' is null, but instead handle it gracefully. But the current code throws an IllegalArgumentException if 'state' is null, which may not be desired.\n\nBut according to the user's context, the issue is with 'plotState' being null, not 'state'. So perhaps the 'drawLabel' method is okay as is.\n\nWait, perhaps the problem is that the 'draw' method is passing a null 'info' to 'drawLabel', which is then used in the 'if (plotState != null && hotspot != null)' condition. But since 'plotState' is null, that block is skipped, which is correct.\n\nSo, perhaps the issue is elsewhere. Maybe the 'draw' method is expecting 'drawLabel' to return a specific state, but when 'plotState' is null, it's not updating correctly.\n\nAlternatively, perhaps the 'draw' method is not checking if 'info' is null before using it, leading to a NullPointerException when it tries to access 'info' after calling 'drawLabel'.\n\nBut again, the user's suggestion is to fix the 'draw' method, but the task is to fix 'drawLabel'.\n\nWait, perhaps the 'drawLabel' method should not throw an exception when 'state' is null, but instead return null or handle it differently. But the current code throws an IllegalArgumentException, which may be causing the AssertionError in the test.\n\nSo, perhaps the fix is to modify the 'drawLabel' method to handle a null 'state' more gracefully, perhaps by returning null instead of throwing an exception.\n\nBut according to the original code's comment, it says: \"it is unlikely that 'state' will be null, but check anyway...\". So, the method is designed to throw an exception if 'state' is null.\n\nBut perhaps in the scenario where 'info' is null, the 'draw' method is passing a null 'state' to 'drawLabel', causing the exception.\n\nWait, no, because 'state' is a different parameter. The 'draw' method would be passing 'state' as an AxisState, which should not be null. So perhaps the 'draw' method is incorrectly passing a null 'state' when 'info' is null.\n\nBut that's a problem in the 'draw' method, not 'drawLabel'.\n\nHmm, I'm a bit stuck. Let me try to think differently.\n\nThe user provided a suggestion to handle the null 'info' in the 'draw' method. So perhaps the 'draw' method should check if 'info' is null and handle it, perhaps by not calling 'drawLabel' or by passing a default value.\n\nBut since I'm to fix 'drawLabel', perhaps I should ensure that it doesn't throw any exceptions when 'plotState' is null.\n\nWait, looking again at 'drawLabel', the only use of 'plotState' is in the last if block, which is protected by a null check. So, if 'plotState' is null, that code is skipped. So, no exception should be thrown from that part.\n\nSo, perhaps the exception is being thrown elsewhere in 'drawLabel'. Let me check.\n\nThe method starts by checking if 'state' is null and throws an exception. So, if 'state' is null, it throws. But according to the user's context, the issue is with 'plotState' being null, not 'state'.\n\nSo, perhaps the 'draw' method is passing a null 'state' when 'info' is null, leading to the exception in 'drawLabel'.\n\nBut that would mean that the 'draw' method is incorrectly passing a null 'state' when 'info' is null, which is a separate issue.\n\nIn that case, the fix would be in the 'draw' method to ensure that 'state' is not null when calling 'drawLabel'.\n\nBut since I'm to fix 'drawLabel', perhaps I should modify it to handle a null 'state' without throwing an exception, perhaps by returning null or handling it differently.\n\nAlternatively, perhaps the 'drawLabel' method should not throw an exception when 'state' is null, but instead handle it by returning a default state or something.\n\nBut according to the original code's comment, it's unlikely that 'state' is null, so perhaps the exception is appropriate.\n\nWait, perhaps the 'draw' method is supposed to handle the null 'info' by not calling 'drawLabel' at all, thus avoiding the exception.\n\nBut again, that's a fix for the 'draw' method.\n\nI'm a bit confused. Let me try to summarize:\n\n- The bug is caused by the 'draw' method not handling null 'info', leading to an exception in 'drawLabel'.\n- The 'drawLabel' method expects 'state' to be non-null and throws an exception if it is null.\n- So, perhaps when 'info' is null, the 'draw' method is passing a null 'state' to 'drawLabel', causing the exception.\n\nTherefore, the fix should be in the 'draw' method to ensure that 'state' is not null when calling 'drawLabel' even if 'info' is null.\n\nBut since I'm to fix 'drawLabel', perhaps I should modify it to handle a null 'state' more gracefully.\n\nAlternatively, perhaps the 'drawLabel' method should not throw an exception when 'state' is null, but instead return a default state or handle it without throwing.\n\nBut according to the original code, it's designed to throw if 'state' is null, which suggests that 'state' should never be null.\n\nSo, perhaps the real issue is that the 'draw' method is passing a null 'state' when 'info' is null, which is incorrect.\n\nBut again, that's a problem in the 'draw' method.\n\nGiven that, perhaps the correct fix is to modify the 'draw' method to handle null 'info' and not pass a null 'state' to 'drawLabel'.\n\nBut since the task is to fix 'drawLabel', perhaps I should consider if there's any way to make 'drawLabel' more robust.\n\nWait, perhaps the 'drawLabel' method should check if 'plotState' is null and avoid using it, but that's already done.\n\nAlternatively, perhaps the 'drawLabel' method should not update the 'state' if 'plotState' is null, but that's already the case.\n\nI'm not sure. Maybe I should proceed by adding a null check for 'plotState' in 'drawLabel' and handle it, but the code already does that.\n\nWait, perhaps the issue is that when 'plotState' is null, the 'hotspot' is not created, leading to no entities being added, which could cause issues elsewhere. But that's speculative.\n\nAlternatively, perhaps the 'draw' method is expecting 'drawLabel' to always return a valid 'state', but when 'plotState' is null, it's not updating it correctly.\n\nBut I don't see how that would cause an AssertionError.\n\nHmm, perhaps I should consider that the 'drawLabel' method is correct and the fix should be in the 'draw' method as suggested. But since the task is to fix 'drawLabel', perhaps I should leave it as is.\n\nWait, perhaps the 'drawLabel' method should not throw an exception when 'state' is null, but instead handle it by returning a default state or something.\n\nBut according to the original code, it's expecting 'state' to be non-null.\n\nAlternatively, perhaps the 'drawLabel' method should return a new state instead of modifying the existing one when 'state' is null.\n\nBut that would be a significant change.\n\nI think I'm overcomplicating this. The user's suggestion is to handle the null 'info' in the 'draw' method, but since I'm to fix 'drawLabel', perhaps I should ensure that it doesn't throw an exception when 'plotState' is null.\n\nBut in the current code, it's already handled. So perhaps the issue is elsewhere.\n\nWait, perhaps the 'drawLabel' method is being called with a null 'plotState', and the code inside the if block is trying to access 'plotState.getOwner()' which would throw a NullPointerException if 'plotState' is null. But wait, no, because the condition is 'if (plotState != null && hotspot != null)', so it's safe.\n\nSo, perhaps the issue is that the 'draw' method is not handling the null 'info' correctly, leading to an exception before or after calling 'drawLabel'.\n\nIn that case, the fix should be in the 'draw' method, but since I can't change that, perhaps I should make sure that 'drawLabel' doesn't cause any issues when 'plotState' is null.\n\nBut I don't see any issues in 'drawLabel' regarding 'plotState'.\n\nWait, perhaps the 'drawLabel' method is expecting 'plotState' to be non-null and is using it elsewhere without checking. But looking at the code, it's only used in that one if block.\n\nSo, perhaps the 'drawLabel' method is correct, and the fix should be in the 'draw' method as suggested.\n\nBut since the task is to fix 'drawLabel', perhaps I should proceed by adding a null check for 'plotState' at the beginning of the method and handle it, perhaps by returning early.\n\nWait, but the method already checks for 'plotState' in the if block. So, perhaps adding a null check at the beginning isn't necessary.\n\nAlternatively, perhaps the method should return immediately if 'plotState' is null, but that would skip drawing the label, which may not be desired.\n\nHmm, perhaps the issue is that when 'plotState' is null, the 'drawLabel' method doesn't draw the label, leading to missing labels and causing the test to fail.\n\nBut according to the code, the label is drawn regardless of 'plotState'; 'plotState' is only used to add entities.\n\nSo, the drawing of the label should still happen even if 'plotState' is null.\n\nWait, looking at the code, the drawing is done in the if-else blocks based on the edge, and that's outside of the 'plotState' check. So, the label is drawn regardless of 'plotState' being null.\n\nSo, the only thing affected by 'plotState' being null is the addition of entities, which is skipped.\n\nSo, perhaps the issue is that when 'plotState' is null, the label is drawn but not added to the entities, which may cause issues elsewhere.\n\nBut the user's problem is an AssertionError, which suggests that the test is expecting a certain condition that isn't met.\n\nPerhaps the test expects that when 'info' is null, the 'draw' method doesn't call 'drawLabel' at all, but it does, leading to an exception.\n\nBut again, that's a problem in the 'draw' method.\n\nGiven all this, perhaps the correct approach is to modify the 'draw' method to handle null 'info' by not calling 'drawLabel' or by passing a default 'plotState'.\n\nBut since I'm to fix 'drawLabel', perhaps I should make sure that it handles all possible cases, including 'plotState' being null, which it already does.\n\nSo, perhaps the 'drawLabel' method is correct, and the fix should be in the 'draw' method.\n\nBut the user is asking to fix 'drawLabel', so perhaps I should proceed by adding a null check for 'plotState' at the beginning and return early if it's null, but that would skip drawing the label, which may not be correct.\n\nAlternatively, perhaps I should leave 'drawLabel' as is, since it's correctly handling the null 'plotState'.\n\nWait, perhaps the issue is that the 'drawLabel' method is throwing an exception when 'state' is null, which happens when 'info' is null, leading to the AssertionError.\n\nSo, perhaps the fix is to modify 'drawLabel' to not throw an exception when 'state' is null, but instead handle it.\n\nBut according to the original code, 'state' is an AxisState and is not expected to be null. So, perhaps the 'draw' method is incorrectly passing a null 'state' when 'info' is null.\n\nIn that case, the fix would be in the 'draw' method to ensure that 'state' is not null when calling 'drawLabel'.\n\nBut since I can't change the 'draw' method, perhaps I should modify 'drawLabel' to handle a null 'state' without throwing an exception.\n\nSo, perhaps I should change the initial check to not throw an exception but instead return a default state or handle it differently.\n\nBut that would be a significant change in behavior.\n\nAlternatively, perhaps the 'drawLabel' method should return null if 'state' is null, but that could cause issues for the caller.\n\nHmm, perhaps the best approach is to modify the 'drawLabel' method to not throw an exception when 'state' is null, but instead return a new AxisState or handle it gracefully.\n\nBut I'm not sure what the default behavior should be.\n\nAlternatively, perhaps the 'drawLabel' method should only throw an exception if 'state' is null and 'plotState' is also null, but that complicates things.\n\nI think I'm stuck. Given the user's suggestion, the fix is to handle the null 'info' in the 'draw' method, but since I'm to fix 'drawLabel', perhaps I should proceed by adding a null check for 'plotState' and handle it, but the code already does that.\n\nSo, perhaps the 'drawLabel' method is correct, and the fix should be in the 'draw' method.\n\nBut since I have to provide a fixed 'drawLabel' method, perhaps I should leave it as is, but that doesn't fix the issue.\n\nWait, perhaps the issue is that the 'drawLabel' method is not handling the case where 'plotState' is null, leading to a NullPointerException when trying to access 'plotState.getOwner()'.\n\nBut no, because the condition is 'if (plotState != null && hotspot != null)', so it's safe.\n\nWait, perhaps the 'hotspot' is null, causing the condition to fail, but that's a different issue.\n\nAlternatively, perhaps the 'drawLabel' method is not correctly calculating the hotspot when 'plotState' is null, but that's not the case.\n\nI think I've exhausted my options. Perhaps the correct fix is to modify the 'draw' method as suggested, but since I can't do that, I'll proceed by ensuring that 'drawLabel' handles '",
      "protected AxisState drawLabel(String label, Graphics2D g2, \n        Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, \n        AxisState state, PlotRenderingInfo plotState) {\n\n    // it is unlikely that 'state' will be null, but check anyway...\n    if (state == null) {\n        throw new IllegalArgumentException(\"Null 'state' argument.\");\n    }\n    \n    if ((label == null) || (label.equals(\"\"))) {\n        return state;\n    }\n\n    Font font = getLabelFont();\n    RectangleInsets insets = getLabelInsets();\n    g2.setFont(font);\n    g2.setPaint(getLabelPaint());\n    FontMetrics fm = g2.getFontMetrics();\n    Rectangle2D labelBounds = TextUtilities.getTextBounds(label, g2, fm);\n    Shape hotspot = null;\n    \n    if (edge == RectangleEdge.TOP) {\n        AffineTransform t = AffineTransform.getRotateInstance(\n                getLabelAngle(), labelBounds.getCenterX(), \n                labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        float w = (float) labelBounds.getWidth();\n        float h = (float) labelBounds.getHeight();\n        float labelx = (float) dataArea.getCenterX();\n        float labely = (float) (state.getCursor() - insets.getBottom() \n                - h / 2.0);\n        TextUtilities.drawRotatedString(label, g2, labelx, labely, \n                TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n                labely - h / 2.0f, w, h);\n        state.cursorUp(insets.getTop() + labelBounds.getHeight() \n                + insets.getBottom());\n    }\n    else if (edge == RectangleEdge.BOTTOM) {\n        AffineTransform t = AffineTransform.getRotateInstance(\n                getLabelAngle(), labelBounds.getCenterX(), \n                labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        float w = (float) labelBounds.getWidth();\n        float h = (float) labelBounds.getHeight();\n        float labelx = (float) dataArea.getCenterX();\n        float labely = (float) (state.getCursor() + insets.getTop() \n                + h / 2.0);\n        TextUtilities.drawRotatedString(label, g2, labelx, labely, \n                TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n                labely - h / 2.0f, w, h);\n        state.cursorDown(insets.getTop() + labelBounds.getHeight() \n                + insets.getBottom());\n    }\n    else if (edge == RectangleEdge.LEFT) {\n        AffineTransform t = AffineTransform.getRotateInstance(\n                getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(), \n                labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        float w = (float) labelBounds.getWidth();\n        float h = (float) labelBounds.getHeight();\n        float labelx = (float) (state.getCursor() - insets.getRight() \n                - w / 2.0);\n        float labely = (float) dataArea.getCenterY();\n        TextUtilities.drawRotatedString(label, g2, labelx, labely, \n                TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, \n                TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n                labely - h / 2.0f, w, h);\n        state.cursorLeft(insets.getLeft() + labelBounds.getWidth() \n                + insets.getRight());\n    }\n    else if (edge == RectangleEdge.RIGHT) {\n\n        AffineTransform t = AffineTransform.getRotateInstance(\n                getLabelAngle() + Math.PI / 2.0, \n                labelBounds.getCenterX(), labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        float w = (float) labelBounds.getWidth();\n        float h = (float) labelBounds.getHeight();\n        float labelx = (float) (state.getCursor() \n                        + insets.getLeft() + w / 2.0);\n        float labely = (float) (dataArea.getY() + dataArea.getHeight() \n                / 2.0);\n        TextUtilities.drawRotatedString(label, g2, labelx, labely, \n                TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, \n                TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n                labely - h / 2.0f, w, h);\n        state.cursorRight(insets.getLeft() + labelBounds.getWidth() \n                + insets.getRight());\n\n    }\n    if (plotState != null && hotspot != null) {\n        ChartRenderingInfo owner = plotState.getOwner();\n            EntityCollection entities = owner.getEntityCollection();\n            if (entities != null) {\n                entities.add(new AxisLabelEntity(this, hotspot, \n                        this.labelToolTip, this.labelURL));\n            }\n    }\n    return state;\n\n}"
    ]
  }
}
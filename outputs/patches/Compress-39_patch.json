{
  "Compress-39": {
    "prompt": [
      "You are a Senior Level Programmer with expertise in debugging and code repair. Your task is to review the provided function and produce a corrected, function-level implementation that fully addresses the identified bug.\n\n@@ Context\n// Provide a fix for the buggy function.\nRoot cause: The root cause of the bug is that the `sanitize` function is not truncating the string to the expected length. The function is correctly replacing non-printable characters with a question mark, but it is not enforcing the maximum length of 255 characters.\nSuggestion: Truncate String After Sanitization\nOne potential solution is to truncate the string after sanitization. We can add a line of code to truncate the string to the expected length after the sanitization loop. This can be achieved by using the `substring` method to truncate the sanitized string to the expected length. Here is the modified code:\n```java\npublic static String sanitize(String s) {\n    final char[] chars = s.toCharArray();\n    final int len = chars.length;\n    final StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < len; i++) {\n        final char c = chars[i];\n        if (!Character.isISOControl(c)) {\n            Character.UnicodeBlock block = Character.UnicodeBlock.of(c);\n            if (block != null && block != Character.UnicodeBlock.SPECIALS) {\n                sb.append(c);\n                continue;\n            }\n        }\n        sb.append('?');\n    }\n    return sb.toString().substring(0, Math.min(sb.length(), 255));\n}\n```\n// Buggy Function\npublic static String sanitize(String s) {\n        final char[] chars = s.toCharArray();\n        final int len = chars.length;\n        final StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < len; i++) {\n            final char c = chars[i];\n            if (!Character.isISOControl(c)) {\n                Character.UnicodeBlock block = Character.UnicodeBlock.of(c);\n                if (block != null && block != Character.UnicodeBlock.SPECIALS) {\n                    sb.append(c);\n                    continue;\n                }\n            }\n            sb.append('?');\n        }\n        return sb.toString();\n    }\n// Fixed Function\n\n@@ Instructions\n1. Carefully analyze the provided root cause and fix suggestion.\n2. Ensure your implementation completely resolves the identified issue.\n3. Maintain the original method signature.\n4. Preserve the original functionality and coding style as much as possible.\n5. Incorporate all working parts of the original implementation.\n6. Follow the provided fix suggestion without over-engineering or introducing unnecessary changes.\n\n@@ Response Format\nReturn ONLY the complete fixed function wrapped in ```java\n<your implementation>\n``` tags.\n\n@@ Important Notes\n- Do not add unnecessary optimizations.\n- Do not modify the method signature.\n- Maintain the original variable names and overall coding style wherever possible.",
      "You are a Senior Level Programmer with expertise in debugging and code repair. Your task is to review the provided function and produce a corrected, function-level implementation that fully addresses the identified bug.\n\n@@ Context\n// Provide a fix for the buggy function.\nRoot cause: The root cause of the bug is that the `sanitize` function is not truncating the string to the expected length. The function is correctly replacing non-printable characters with a question mark, but it is not enforcing the maximum length of 255 characters.\nSuggestion: Use a StringBuilder with a Fixed Capacity\nAnother potential solution is to use a `StringBuilder` with a fixed capacity. We can create a `StringBuilder` with a capacity of 255 characters and use it to build the sanitized string. This will automatically truncate the string to the expected length. Here is the modified code:\n```java\npublic static String sanitize(String s) {\n    final char[] chars = s.toCharArray();\n    final int len = chars.length;\n    final StringBuilder sb = new StringBuilder(255);\n    for (int i = 0; i < len; i++) {\n        final char c = chars[i];\n        if (!Character.isISOControl(c)) {\n            Character.UnicodeBlock block = Character.UnicodeBlock.of(c);\n            if (block != null && block != Character.UnicodeBlock.SPECIALS) {\n                if (sb.length() < 255) {\n                    sb.append(c);\n                }\n                continue;\n            }\n        }\n        if (sb.length() < 255) {\n            sb.append('?');\n        }\n    }\n    return sb.toString();\n}\n```\n// Buggy Function\npublic static String sanitize(String s) {\n        final char[] chars = s.toCharArray();\n        final int len = chars.length;\n        final StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < len; i++) {\n            final char c = chars[i];\n            if (!Character.isISOControl(c)) {\n                Character.UnicodeBlock block = Character.UnicodeBlock.of(c);\n                if (block != null && block != Character.UnicodeBlock.SPECIALS) {\n                    sb.append(c);\n                    continue;\n                }\n            }\n            sb.append('?');\n        }\n        return sb.toString();\n    }\n// Fixed Function\n\n@@ Instructions\n1. Carefully analyze the provided root cause and fix suggestion.\n2. Ensure your implementation completely resolves the identified issue.\n3. Maintain the original method signature.\n4. Preserve the original functionality and coding style as much as possible.\n5. Incorporate all working parts of the original implementation.\n6. Follow the provided fix suggestion without over-engineering or introducing unnecessary changes.\n\n@@ Response Format\nReturn ONLY the complete fixed function wrapped in ```java\n<your implementation>\n``` tags.\n\n@@ Important Notes\n- Do not add unnecessary optimizations.\n- Do not modify the method signature.\n- Maintain the original variable names and overall coding style wherever possible.",
      "You are a Senior Level Programmer with expertise in debugging and code repair. Your task is to review the provided function and produce a corrected, function-level implementation that fully addresses the identified bug.\n\n@@ Context\n// Provide a fix for the buggy function.\nRoot cause: The root cause of the bug is that the `sanitize` function is not truncating the string to the expected length. The function is correctly replacing non-printable characters with a question mark, but it is not enforcing the maximum length of 255 characters.\nSuggestion: Use a Substring to Truncate the String\nA third potential solution is to use a substring to truncate the string. We can use the `substring` method to truncate the sanitized string to the expected length. However, instead of truncating the string after sanitization, we can truncate the string while sanitizing it. Here is the modified code:\n```java\npublic static String sanitize(String s) {\n    final char[] chars = s.toCharArray();\n    final int len = chars.length;\n    final StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < len; i++) {\n        final char c = chars[i];\n        if (!Character.isISOControl(c)) {\n            Character.UnicodeBlock block = Character.UnicodeBlock.of(c);\n            if (block != null && block != Character.UnicodeBlock.SPECIALS) {\n                if (sb.length() < 255) {\n                    sb.append(c);\n                }\n                continue;\n            }\n        }\n        if (sb.length() < 255) {\n            sb.append('?');\n        }\n    }\n    return sb.toString();\n}\n```\n// Buggy Function\npublic static String sanitize(String s) {\n        final char[] chars = s.toCharArray();\n        final int len = chars.length;\n        final StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < len; i++) {\n            final char c = chars[i];\n            if (!Character.isISOControl(c)) {\n                Character.UnicodeBlock block = Character.UnicodeBlock.of(c);\n                if (block != null && block != Character.UnicodeBlock.SPECIALS) {\n                    sb.append(c);\n                    continue;\n                }\n            }\n            sb.append('?');\n        }\n        return sb.toString();\n    }\n// Fixed Function\n\n@@ Instructions\n1. Carefully analyze the provided root cause and fix suggestion.\n2. Ensure your implementation completely resolves the identified issue.\n3. Maintain the original method signature.\n4. Preserve the original functionality and coding style as much as possible.\n5. Incorporate all working parts of the original implementation.\n6. Follow the provided fix suggestion without over-engineering or introducing unnecessary changes.\n\n@@ Response Format\nReturn ONLY the complete fixed function wrapped in ```java\n<your implementation>\n``` tags.\n\n@@ Important Notes\n- Do not add unnecessary optimizations.\n- Do not modify the method signature.\n- Maintain the original variable names and overall coding style wherever possible."
    ],
    "patches": [
      "public static String sanitize(String s) {\n    final char[] chars = s.toCharArray();\n    final int len = chars.length;\n    final StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < len; i++) {\n        final char c = chars[i];\n        if (!Character.isISOControl(c)) {\n            Character.UnicodeBlock block = Character.UnicodeBlock.of(c);\n            if (block != null && block != Character.UnicodeBlock.SPECIALS) {\n                sb.append(c);\n                continue;\n            }\n        }\n        sb.append('?');\n    }\n    return sb.toString().substring(0, Math.min(sb.length(), 255));\n}",
      "public static String sanitize(String s) {\n    final char[] chars = s.toCharArray();\n    final int len = chars.length;\n    final StringBuilder sb = new StringBuilder(255);\n    for (int i = 0; i < len; i++) {\n        final char c = chars[i];\n        if (!Character.isISOControl(c)) {\n            Character.UnicodeBlock block = Character.UnicodeBlock.of(c);\n            if (block != null && block != Character.UnicodeBlock.SPECIALS) {\n                if (sb.length() < 255) {\n                    sb.append(c);\n                }\n                continue;\n            }\n        }\n        if (sb.length() < 255) {\n            sb.append('?');\n        }\n    }\n    return sb.toString();\n}",
      "public static String sanitize(String s) {\n    final char[] chars = s.toCharArray();\n    final int len = chars.length;\n    final StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < len; i++) {\n        final char c = chars[i];\n        if (!Character.isISOControl(c)) {\n            Character.UnicodeBlock block = Character.UnicodeBlock.of(c);\n            if (block != null && block != Character.UnicodeBlock.SPECIALS) {\n                if (sb.length() < 255) {\n                    sb.append(c);\n                }\n                continue;\n            }\n        }\n        if (sb.length() < 255) {\n            sb.append('?');\n        }\n    }\n    return sb.toString();\n}"
    ]
  }
}
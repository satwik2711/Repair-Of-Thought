{
  "JacksonDatabind-55": {
    "prompt": [
      "You are a Senior Level Programmer with expertise in debugging and code repair. Your task is to review the provided function and produce a corrected, function-level implementation that fully addresses the identified bug.\n\n@@ Context\n// Provide a fix for the buggy function.\nRoot cause: The root cause of the issue is that the `getFallbackKeySerializer` function is not correctly handling the case where the raw key type is an enum with a `@JsonProperty` annotation. Specifically, when the raw key type is an enum, the function is returning a `Default` serializer with the enum type, but it's not taking into account the `@JsonProperty` annotation on the enum value.\nSuggestion: Use `@JsonProperty` Annotation\nWe can modify the `getFallbackKeySerializer` function to check if the raw key type is an enum and if it has a `@JsonProperty` annotation. If it does, we can use the value of the annotation as the key serializer. This would involve adding a new check for the `@JsonProperty` annotation and using the `AnnotationIntrospector` to get the value of the annotation.\n// Buggy Function\n@SuppressWarnings(\"unchecked\")\n    public static JsonSerializer<Object> getFallbackKeySerializer(SerializationConfig config,\n            Class<?> rawKeyType)\n    {\n        if (rawKeyType != null) {\n            // 29-Sep-2015, tatu: Odd case here, of `Enum`, which we may get for `EnumMap`; not sure\n            //   if that is a bug or feature. Regardless, it seems to require dynamic handling\n            //   (compared to getting actual fully typed Enum).\n            //  Note that this might even work from the earlier point, but let's play it safe for now\n            // 11-Aug-2016, tatu: Turns out we get this if `EnumMap` is the root value because\n            //    then there is no static type\n            if (rawKeyType == Enum.class) {\n                return new Dynamic();\n            }\n            if (rawKeyType.isEnum()) {\n                return new Default(Default.TYPE_ENUM, rawKeyType);\n            }\n        }\n        return DEFAULT_KEY_SERIALIZER;\n    }\n// Fixed Function\n\n@@ Instructions\n1. Carefully analyze the provided root cause and fix suggestion.\n2. Ensure your implementation completely resolves the identified issue.\n3. Maintain the original method signature.\n4. Preserve the original functionality and coding style as much as possible.\n5. Incorporate all working parts of the original implementation.\n6. Follow the provided fix suggestion without over-engineering or introducing unnecessary changes.\n\n@@ Response Format\nReturn ONLY the complete fixed function wrapped in ```java\n<your implementation>\n``` tags.\n\n@@ Important Notes\n- Do not add unnecessary optimizations.\n- Do not modify the method signature.\n- Maintain the original variable names and overall coding style wherever possible.",
      "You are a Senior Level Programmer with expertise in debugging and code repair. Your task is to review the provided function and produce a corrected, function-level implementation that fully addresses the identified bug.\n\n@@ Context\n// Provide a fix for the buggy function.\nRoot cause: The root cause of the issue is that the `getFallbackKeySerializer` function is not correctly handling the case where the raw key type is an enum with a `@JsonProperty` annotation. Specifically, when the raw key type is an enum, the function is returning a `Default` serializer with the enum type, but it's not taking into account the `@JsonProperty` annotation on the enum value.\nSuggestion: Use `Enum` Value as Key Serializer\nAnother approach would be to use the `Enum` value as the key serializer. This would involve modifying the `getFallbackKeySerializer` function to return a `Default` serializer with the `Enum` value instead of the enum type. This would ensure that the `@JsonProperty` annotation is taken into account when serializing the enum key.\n// Buggy Function\n@SuppressWarnings(\"unchecked\")\n    public static JsonSerializer<Object> getFallbackKeySerializer(SerializationConfig config,\n            Class<?> rawKeyType)\n    {\n        if (rawKeyType != null) {\n            // 29-Sep-2015, tatu: Odd case here, of `Enum`, which we may get for `EnumMap`; not sure\n            //   if that is a bug or feature. Regardless, it seems to require dynamic handling\n            //   (compared to getting actual fully typed Enum).\n            //  Note that this might even work from the earlier point, but let's play it safe for now\n            // 11-Aug-2016, tatu: Turns out we get this if `EnumMap` is the root value because\n            //    then there is no static type\n            if (rawKeyType == Enum.class) {\n                return new Dynamic();\n            }\n            if (rawKeyType.isEnum()) {\n                return new Default(Default.TYPE_ENUM, rawKeyType);\n            }\n        }\n        return DEFAULT_KEY_SERIALIZER;\n    }\n// Fixed Function\n\n@@ Instructions\n1. Carefully analyze the provided root cause and fix suggestion.\n2. Ensure your implementation completely resolves the identified issue.\n3. Maintain the original method signature.\n4. Preserve the original functionality and coding style as much as possible.\n5. Incorporate all working parts of the original implementation.\n6. Follow the provided fix suggestion without over-engineering or introducing unnecessary changes.\n\n@@ Response Format\nReturn ONLY the complete fixed function wrapped in ```java\n<your implementation>\n``` tags.\n\n@@ Important Notes\n- Do not add unnecessary optimizations.\n- Do not modify the method signature.\n- Maintain the original variable names and overall coding style wherever possible.",
      "You are a Senior Level Programmer with expertise in debugging and code repair. Your task is to review the provided function and produce a corrected, function-level implementation that fully addresses the identified bug.\n\n@@ Context\n// Provide a fix for the buggy function.\nRoot cause: The root cause of the issue is that the `getFallbackKeySerializer` function is not correctly handling the case where the raw key type is an enum with a `@JsonProperty` annotation. Specifically, when the raw key type is an enum, the function is returning a `Default` serializer with the enum type, but it's not taking into account the `@JsonProperty` annotation on the enum value.\nSuggestion: Use `AnnotationIntrospector` to Get `@JsonProperty` Value\nWe can also use the `AnnotationIntrospector` to get the value of the `@JsonProperty` annotation on the enum value. This would involve adding a new check for the `@JsonProperty` annotation and using the `AnnotationIntrospector` to get the value of the annotation. We can then use this value as the key serializer.\n\nThe modified code for Suggestion 2 would be:\n```java\nif (rawKeyType.isEnum()) {\n    return new Default(Default.TYPE_ENUM, ((Enum<?>) rawKeyType.getEnumConstants()[0]).name());\n}\n```\nThis code uses the `Enum` value as the key serializer, ensuring that the `@JsonProperty` annotation is taken into account.\n// Buggy Function\n@SuppressWarnings(\"unchecked\")\n    public static JsonSerializer<Object> getFallbackKeySerializer(SerializationConfig config,\n            Class<?> rawKeyType)\n    {\n        if (rawKeyType != null) {\n            // 29-Sep-2015, tatu: Odd case here, of `Enum`, which we may get for `EnumMap`; not sure\n            //   if that is a bug or feature. Regardless, it seems to require dynamic handling\n            //   (compared to getting actual fully typed Enum).\n            //  Note that this might even work from the earlier point, but let's play it safe for now\n            // 11-Aug-2016, tatu: Turns out we get this if `EnumMap` is the root value because\n            //    then there is no static type\n            if (rawKeyType == Enum.class) {\n                return new Dynamic();\n            }\n            if (rawKeyType.isEnum()) {\n                return new Default(Default.TYPE_ENUM, rawKeyType);\n            }\n        }\n        return DEFAULT_KEY_SERIALIZER;\n    }\n// Fixed Function\n\n@@ Instructions\n1. Carefully analyze the provided root cause and fix suggestion.\n2. Ensure your implementation completely resolves the identified issue.\n3. Maintain the original method signature.\n4. Preserve the original functionality and coding style as much as possible.\n5. Incorporate all working parts of the original implementation.\n6. Follow the provided fix suggestion without over-engineering or introducing unnecessary changes.\n\n@@ Response Format\nReturn ONLY the complete fixed function wrapped in ```java\n<your implementation>\n``` tags.\n\n@@ Important Notes\n- Do not add unnecessary optimizations.\n- Do not modify the method signature.\n- Maintain the original variable names and overall coding style wherever possible."
    ],
    "patches": [
      "@SuppressWarnings(\"unchecked\")\npublic static JsonSerializer<Object> getFallbackKeySerializer(SerializationConfig config,\n        Class<?> rawKeyType)\n{\n    if (rawKeyType != null) {\n        if (rawKeyType == Enum.class) {\n            return new Dynamic();\n        }\n        if (rawKeyType.isEnum()) {\n            // Check if any enum constants have @JsonProperty annotation\n            boolean hasAnnotation = false;\n            for (Field field : rawKeyType.getDeclaredFields()) {\n                if (field.isEnumConstant() && field.getAnnotation(JsonProperty.class) != null) {\n                    hasAnnotation = true;\n                    break;\n                }\n            }\n            if (hasAnnotation) {\n                return new EnumWithJsonPropertySerializer(rawKeyType);\n            } else {\n                return new Default(Default.TYPE_ENUM, rawKeyType);\n            }\n        }\n    }\n    return DEFAULT_KEY_SERIALIZER;\n}\n\n/**\n * Custom serializer for enums that have @JsonProperty annotations on their constants.\n */\nprivate static class EnumWithJsonPropertySerializer extends JsonSerializer<Object> {\n    private final Class<?> enumType;\n    private final Map<Enum<?>, String> enumToKey;\n\n    public EnumWithJsonPropertySerializer(Class<?> enumType) {\n        this.enumType = enumType;\n        this.enumToKey = new HashMap<>();\n        for (Enum<?> e : (Enum<?>) enumType.getEnumConstants()) {\n            try {\n                Field field = enumType.getDeclaredField(e.name());\n                JsonProperty annotation = field.getAnnotation(JsonProperty.class);\n                if (annotation != null) {\n                    enumToKey.put(e, annotation.value());\n                }\n            } catch (NoSuchFieldException ex) {\n                // Should not occur as we are iterating over declared enum constants\n            }\n        }\n    }\n\n    @Override\n    public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n        if (value == null) {\n            gen.writeNull();\n            return;\n        }\n        if (!enumType.isInstance(value)) {\n            throw new IllegalArgumentException(\"Value is not of the expected enum type\");\n        }\n        Enum<?> enumValue = (Enum<?>) value;\n        String key = enumToKey.getOrDefault(enumValue, enumValue.name());\n        gen.writeName(key);\n    }\n}",
      "@SuppressWarnings(\"unchecked\")\npublic static JsonSerializer<Object> getFallbackKeySerializer(SerializationConfig config,\n        Class<?> rawKeyType)\n{\n    if (rawKeyType != null) {\n        if (rawKeyType == Enum.class) {\n            return new Dynamic();\n        }\n        if (rawKeyType.isEnum()) {\n            return DEFAULT_KEY_SERIALIZER;\n        }\n    }\n    return DEFAULT_KEY_SERIALIZER;\n}",
      "@SuppressWarnings(\"unchecked\")\npublic static JsonSerializer<Object> getFallbackKeySerializer(SerializationConfig config,\n        Class<?> rawKeyType)\n{\n    if (rawKeyType != null) {\n        if (rawKeyType == Enum.class) {\n            return new Dynamic();\n        }\n        if (rawKeyType.isEnum()) {\n            AnnotationIntrospector intr = config.getAnnotationIntrospector();\n            Object[] enumConstants = rawKeyType.getEnumConstants();\n            if (enumConstants != null) {\n                for (Object enumConst : enumConstants) {\n                    JsonProperty ann = intr.findAnnotation((Enum<?>) enumConst, JsonProperty.class);\n                    if (ann != null) {\n                        String value = ann.value();\n                        if (value != null && !value.isEmpty()) {\n                            return new Default(Default.TYPE_ENUM, value);\n                        }\n                    }\n                }\n            }\n            // Fallback to using the enum name if no @JsonProperty is found\n            return new Default(Default.TYPE_ENUM, ((Enum<?>) enumConstants[0]).name());\n        }\n    }\n    return DEFAULT_KEY_SERIALIZER;\n}"
    ]
  }
}
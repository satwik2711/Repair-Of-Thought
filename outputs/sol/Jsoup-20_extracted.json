{
  "Jsoup-20": {
    "The root cause of the bug is that the function does not correctly handle the spurious byte-order-mark (BOM) at the start of the HTML data. When the charset name is provided, the function does not check for the BOM and directly decodes the byte buffer using the provided charset. This results in the BOM being included in the decoded HTML data, which causes the parser to go into head mode and skip the title tag.": [
      "Check for BOM before Decoding\nWe can modify the function to check for the BOM at the start of the byte buffer before decoding it. If a BOM is found, we can skip it before decoding the rest of the buffer. This will ensure that the BOM is not included in the decoded HTML data. The modified code would be:\n```java\nif (charsetName != null) {\n    // Check for BOM before decoding\n    if (byteData.hasArray() && byteData.array().length > 3 && byteData.array()[0] == (byte) 0xEF && byteData.array()[1] == (byte) 0xBB && byteData.array()[2] == (byte) 0xBF) {\n        byteData.position(3);\n    }\n    docData = Charset.forName(charsetName).decode(byteData).toString();\n}\n```\nThis code checks for the BOM at the start of the byte buffer and skips it before decoding the rest of the buffer.",
      "Use a BOM-Aware Decoder\nWe can use a BOM-aware decoder to decode the byte buffer. This decoder will automatically detect and skip the BOM at the start of the buffer, ensuring that it is not included in the decoded HTML data. We can use the `BOMInputStream` class from the Apache Commons IO library to create a BOM-aware decoder. The modified code would be:\n```java\nif (charsetName != null) {\n    // Use a BOM-aware decoder\n    BOMInputStream bomInputStream = new BOMInputStream(new ByteArrayInputStream(byteData.array()));\n    bomInputStream.setCharset(Charset.forName(charsetName));\n    docData = bomInputStream.toString();\n}\n```\nThis code uses a BOM-aware decoder to decode the byte buffer and skip the BOM at the start of the buffer.",
      "Modify the Parser to Ignore BOM\nWe can modify the parser to ignore the BOM at the start of the HTML data. This will ensure that the parser does not go into head mode and skip the title tag. We can modify the parser to ignore the BOM by adding a special case to handle the BOM character. The modified code would be:\n```java\nif (doc == null) {\n    // Modify the parser to ignore BOM\n    parser.setIgnoreBOM(true);\n    doc = parser.parseInput(docData, baseUri);\n}\n```\nThis code modifies the parser to ignore the BOM at the start of the HTML data, ensuring that it does not affect the parsing of the document."
    ]
  }
}
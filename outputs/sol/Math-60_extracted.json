{
  "Math-60": {
    "The root cause of the bug is that the `erf` function is not able to handle inputs that are `Double.POSITIVE_INFINITY` or `Double.NEGATIVE_INFINITY`. This is because the `erf` function uses a continued fraction to compute the error function, and this continued fraction diverges to NaN for these extreme values.": [
      "Special Case Handling\nWe can add special case handling to the `cumulativeProbability` method to return 1 or 0 immediately when the input is `Double.POSITIVE_INFINITY` or `Double.NEGATIVE_INFINITY`, respectively. This would avoid the need to call the `erf` function in these cases. Here is the modified code:\n```java\npublic double cumulativeProbability(double x) throws MathException {\n    if (x == Double.POSITIVE_INFINITY) {\n        return 1;\n    } else if (x == Double.NEGATIVE_INFINITY) {\n        return 0;\n    } else {\n        final double dev = x - mean;\n        try {\n            return 0.5 * (1.0 + Erf.erf((dev) /\n                    (standardDeviation * FastMath.sqrt(2.0))));\n        } catch (MaxIterationsExceededException ex) {\n            if (x < (mean - 20 * standardDeviation)) {\n                return 0;\n            } else if (x > (mean + 20 * standardDeviation)) {\n                return 1;\n            } else {\n                throw ex;\n            }\n        }\n    }\n}\n```",
      "Use a Different Implementation of the Error Function\nWe can use a different implementation of the error function that is able to handle extreme values correctly. For example, we could use an implementation that uses a series expansion to compute the error function, rather than a continued fraction. This would require replacing the `Erf.erf` call with a call to the new implementation.",
      "Limit the Input Range\nWe can modify the `cumulativeProbability` method to limit the input range to a finite range, such as [-40, 40] standard deviations from the mean. This would avoid the need to handle extreme values, but would also limit the accuracy of the method for very large or very small inputs. Here is the modified code:\n```java\npublic double cumulativeProbability(double x) throws MathException {\n    if (x < (mean - 40 * standardDeviation)) {\n        return 0;\n    } else if (x > (mean + 40 * standardDeviation)) {\n        return 1;\n    } else {\n        final double dev = x - mean;\n        try {\n            return 0.5 * (1.0 + Erf.erf((dev) /\n                    (standardDeviation * FastMath.sqrt(2.0))));\n        } catch (MaxIterationsExceededException ex) {\n            if (x < (mean - 20 * standardDeviation)) {\n                return 0;\n            } else if (x > (mean + 20 * standardDeviation)) {\n                return 1;\n            } else {\n                throw ex;\n            }\n        }\n    }\n}\n```"
    ]
  }
}
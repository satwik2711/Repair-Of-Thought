{
  "Mockito-27": {
    "The root cause of the bug is that the `resetMock` function is not properly preserving the invocation listener when resetting the mock object. Specifically, the new `MethodInterceptorFilter` created in the `resetMock` function does not include the invocation listener from the original mock object.": [
      "Preserve Invocation Listener\nPreserve the invocation listener from the original mock object by passing it to the new `MethodInterceptorFilter`. This can be done by retrieving the invocation listener from the original mock object and passing it to the `MethodInterceptorFilter` constructor. The modified `resetMock` function would look like this:\n\n```java\npublic <T> void resetMock(T mock) {\n    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n    InvocationListener invocationListener = ((Factory) mock).getInvocationListener();\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, invocationListener, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n    ((Factory) mock).setCallback(0, newFilter);\n}\n```",
      "Use Existing Mock Settings\nUse the existing mock settings to create the new `MethodInterceptorFilter`. This can be done by retrieving the mock settings from the original mock object and passing them to the `MethodInterceptorFilter` constructor. The modified `resetMock` function would look like this:\n\n```java\npublic <T> void resetMock(T mock) {\n    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n    MockSettingsImpl mockSettings = ((Factory) mock).getMockSettings();\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, mockSettings);\n    ((Factory) mock).setCallback(0, newFilter);\n}\n```",
      "Create a New Invocation Listener\nCreate a new invocation listener that wraps the original invocation listener and passes it to the new `MethodInterceptorFilter`. This can be done by creating a new invocation listener that delegates to the original invocation listener. The modified `resetMock` function would look like this:\n\n```java\npublic <T> void resetMock(T mock) {\n    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n    InvocationListener invocationListener = ((Factory) mock).getInvocationListener();\n    InvocationListener newInvocationListener = new InvocationListener() {\n        @Override\n        public void reportInvocation(MethodInvocationReport methodInvocationReport) {\n            invocationListener.reportInvocation(methodInvocationReport);\n        }\n    };\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, newInvocationListener, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n    ((Factory) mock).setCallback(0, newFilter);\n}\n```"
    ]
  }
}
{
  "JacksonDatabind-20": {
    "The root cause of the bug is that the `setAll` method in the `JsonNode` class is being confused with a setter method for the property 'all' in the JSON string. This is because the `ObjectMapper` is using a `LOWER_CASE` property naming strategy, which converts the property name 'all' to 'setAll', which is the same name as the `setAll` method in the `JsonNode` class.": [
      "Rename the setAll Method\nOne possible fix is to rename the `setAll` method to something else, such as `addAllProperties`. This would avoid the conflict with the setter method for the property 'all'. The updated method would look like this:\n```java\npublic JsonNode addAllProperties(Map<String,? extends JsonNode> properties)\n{\n    for (Map.Entry<String,? extends JsonNode> en : properties.entrySet()) {\n        JsonNode n = en.getValue();\n        if (n == null) {\n            n = nullNode();\n        }\n        _children.put(en.getKey(), n);\n    }\n    return this;\n}\n```",
      "Use the @JsonIgnore annotation\nWe can also use the `@JsonIgnore` annotation on the `setAll` method to ignore it during deserialization. This would prevent the conflict with the setter method for the property 'all'. The updated method would look like this:\n```java\n@JsonIgnore\npublic JsonNode setAll(Map<String,? extends JsonNode> properties)\n{\n    for (Map.Entry<String,? extends JsonNode> en : properties.entrySet()) {\n        JsonNode n = en.getValue();\n        if (n == null) {\n            n = nullNode();\n        }\n        _children.put(en.getKey(), n);\n    }\n    return this;\n}\n```",
      "Use the @JsonProperty annotation\nWe can also use the `@JsonProperty` annotation on the `setAll` method to specify a different name for the property. For example, we can use `@JsonProperty(\"addAll\")` to specify that the `setAll` method should be used to set the 'addAll' property. The updated method would look like this:\n```java\n@JsonProperty(\"addAll\")\npublic JsonNode setAll(Map<String,? extends JsonNode> properties)\n{\n    for (Map.Entry<String,? extends JsonNode> en : properties.entrySet()) {\n        JsonNode n = en.getValue();\n        if (n == null) {\n            n = nullNode();\n        }\n        _children.put(en.getKey(), n);\n    }\n    return this;\n}\n```"
    ]
  }
}
{
  "Jsoup-77": {
    "The issue lies in the fact that the `popStackToClose` function is removing elements from the stack while iterating over it in reverse order. However, the `remove` operation is not considering the fact that the indices of the remaining elements in the stack will shift after each removal. As a result, the function is skipping over some elements and not removing the correct ones.": [
      "Use a While Loop to Remove Elements\nInstead of using a for loop to iterate over the stack, we can use a while loop to remove elements until we find the first occurrence of the element with the given tag name. This will ensure that we don't skip over any elements. Here is the modified code:\n```java\nprivate void popStackToClose(Token.EndTag endTag) {\n    String elName = endTag.name();\n    Element firstFound = null;\n\n    for (int pos = stack.size() -1; pos >= 0; pos--) {\n        Element next = stack.get(pos);\n        if (next.nodeName().equals(elName)) {\n            firstFound = next;\n            break;\n        }\n    }\n    if (firstFound == null)\n        return; // not found, skip\n\n    int pos = stack.size() - 1;\n    while (pos >= 0) {\n        Element next = stack.get(pos);\n        stack.remove(pos);\n        if (next == firstFound)\n            break;\n        pos--;\n    }\n}\n```",
      "Decrement the Index After Removal\nWe can modify the for loop to decrement the index after removing an element from the stack. This will ensure that we don't skip over any elements. Here is the modified code:\n```java\nprivate void popStackToClose(Token.EndTag endTag) {\n    String elName = endTag.name();\n    Element firstFound = null;\n\n    for (int pos = stack.size() -1; pos >= 0; pos--) {\n        Element next = stack.get(pos);\n        if (next.nodeName().equals(elName)) {\n            firstFound = next;\n            break;\n        }\n    }\n    if (firstFound == null)\n        return; // not found, skip\n\n    for (int pos = stack.size() -1; pos >= 0; pos--) {\n        Element next = stack.get(pos);\n        stack.remove(pos);\n        if (next == firstFound)\n            break;\n        pos--; // decrement the index after removal\n    }\n}\n```",
      "Use an Iterator to Remove Elements\nWe can use an iterator to remove elements from the stack. This will ensure that we don't skip over any elements and will also avoid the issue of indices shifting after removal. Here is the modified code:\n```java\nprivate void popStackToClose(Token.EndTag endTag) {\n    String elName = endTag.name();\n    Element firstFound = null;\n\n    for (int pos = stack.size() -1; pos >= 0; pos--) {\n        Element next = stack.get(pos);\n        if (next.nodeName().equals(elName)) {\n            firstFound = next;\n            break;\n        }\n    }\n    if (firstFound == null)\n        return; // not found, skip\n\n    Iterator<Element> iterator = stack.iterator();\n    while (iterator.hasNext()) {\n        Element next = iterator.next();\n        if (next == firstFound) {\n            iterator.remove();\n            break;\n        }\n    }\n}\n```"
    ]
  }
}
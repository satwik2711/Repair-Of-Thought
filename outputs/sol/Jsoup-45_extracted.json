{
  "Jsoup-45": {
    "The buggy function resetInsertionMode() is not correctly handling the case where a th element contains nested tables and div elements. The function is transitioning to the InBody state when it encounters a th element, which is causing the parser to incorrectly handle the nested elements.": [
      "Handle Nested Tables in Th Elements\nWe can add a special case to handle th elements that contain nested tables. When we encounter a th element, we can check if it contains any nested tables and if so, transition to the InTable state instead of the InBody state. This will allow the parser to correctly handle the nested tables.",
      "Modify the Transition Logic for Th Elements\nWe can modify the transition logic for th elements to correctly handle the case where a th element contains nested tables and div elements. Instead of transitioning to the InBody state when we encounter a th element, we can transition to the InCell state and then check if the th element contains any nested tables or div elements. If it does, we can transition to the correct state.",
      "Use a Stack to Keep Track of Element States\nWe can use a stack to keep track of the element states as we parse the HTML document. When we encounter a th element, we can push the current state onto the stack and transition to the InBody state. When we encounter a nested table or div element, we can pop the state from the stack and transition to the correct state. This will allow the parser to correctly handle the nested elements.\n\nHere is the modified code for",
      "```java\nvoid resetInsertionMode() {\n    boolean last = false;\n    for (int pos = stack.size() -1; pos >= 0; pos--) {\n        Element node = stack.get(pos);\n        if (pos == 0) {\n            last = true;\n            node = contextElement;\n        }\n        String name = node.nodeName();\n        if (\"select\".equals(name)) {\n            transition(HtmlTreeBuilderState.InSelect);\n            break; // frag\n        } else if ((\"td\".equals(name) || \"th\".equals(name))) {\n            transition(HtmlTreeBuilderState.InCell);\n            break;\n        } else if (\"tr\".equals(name)) {\n            transition(HtmlTreeBuilderState.InRow);\n            break;\n        } else if (\"tbody\".equals(name) || \"thead\".equals(name) || \"tfoot\".equals(name)) {\n            transition(HtmlTreeBuilderState.InTableBody);\n            break;\n        } else if (\"caption\".equals(name)) {\n            transition(HtmlTreeBuilderState.InCaption);\n            break;\n        } else if (\"colgroup\".equals(name)) {\n            transition(HtmlTreeBuilderState.InColumnGroup);\n            break; // frag\n        } else if (\"table\".equals(name)) {\n            transition(HtmlTreeBuilderState.InTable);\n            break;\n        } else if (\"head\".equals(name)) {\n            transition(HtmlTreeBuilderState.BeforeHead);\n            break; // frag\n        } else if (\"body\".equals(name)) {\n            transition(HtmlTreeBuilderState.InBody);\n            break;\n        } else if (\"frameset\".equals(name)) {\n            transition(HtmlTreeBuilderState.InFrameset);\n            break; // frag\n        } else if (\"html\".equals(name)) {\n            transition(HtmlTreeBuilderState.BeforeHead);\n            break; // frag\n        } else if (last) {\n            transition(HtmlTreeBuilderState.InBody);\n            break; // frag\n        }\n    }\n}\n```"
    ]
  }
}